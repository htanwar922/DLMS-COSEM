// ===========================================================================
// Copyright (c) 2018, Electric Power Research Institute (EPRI)
// All rights reserved.
//
// DLMS-COSEM ("this software") is licensed under BSD 3-Clause license.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// *  Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// *  Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// *  Neither the name of EPRI nor the names of its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
// OF SUCH DAMAGE.
//
// This EPRI software incorporates work covered by the following copyright and permission
// notices. You may not use these works except in compliance with their respective
// licenses, which are provided below.
//
// These works are provided by the copyright holders and contributors "as is" and any express or
// implied warranties, including, but not limited to, the implied warranties of merchantability
// and fitness for a particular purpose are disclaimed.
//
// This software relies on the following libraries and licenses:
//
// ###########################################################################
// Boost Software License, Version 1.0
// ###########################################################################
//
// * asio v1.10.8 (https://sourceforge.net/projects/asio/files/)
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//

#include "COSEM/COSEM.h"
#include "Device/LogicalDevice.h"

namespace EPRI
{
    //
    // LogicalDevice
    //
    LogicalDevice::LogicalDevice(COSEMServer * pServer) :
        m_pServer(pServer),
        m_SecuritySetup(),
        m_Association(&m_Objects)
    {
        LOGICAL_DEVICE_BEGIN_OBJECTS
            LOGICAL_DEVICE_OBJECT(m_SecuritySetup)
            LOGICAL_DEVICE_OBJECT(m_Association)
        LOGICAL_DEVICE_END_OBJECTS
    }

    LogicalDevice::~LogicalDevice()
    {
    }

    bool LogicalDevice::InitiateOpen(const APPOpenRequestOrIndication& Request, bool UpperLayerAllowed)
    {
        APPOpenConfirmOrResponse::AssociationResultType Result = APPOpenConfirmOrResponse::AssociationResultType::accepted;
        if (!UpperLayerAllowed || m_Association.AvailableAssociations() == 0)
        {
            Result = APPOpenConfirmOrResponse::AssociationResultType::rejected_transient;
        }
        std::unique_ptr<xDLMS::InitiateResponseVariant> pResponse_xDLMS;        // Himanshu - GLO
        if (Request.m_xDLMS.IsPlain())
        {
            pResponse_xDLMS = std::make_unique<xDLMS::InitiateResponseVariant>(xDLMS::InitiateResponse(Request.m_xDLMS.GetPlainRequest()));
        }
        else if (Request.m_xDLMS.IsGloCiphered())
        {
            const std::shared_ptr<ISecuritySuite> pSuite = m_Association.GetSecuritySetup(Request.m_SourceAddress);
            if (pSuite)
            {
                DLMSVector Plaintext = Request.m_xDLMS.GetGloRequest().Decrypt(pSuite, Request.m_SecurityOptions);
                std::unique_ptr<xDLMS::InitiateRequest> pRequest_xDLMS = std::make_unique<xDLMS::InitiateRequest>();
                if (!pRequest_xDLMS->Parse(&Plaintext))
                {
                    Result = APPOpenConfirmOrResponse::AssociationResultType::rejected_permanent;
                }
                else
                {
                    xDLMS::GLO::InitiateResponse Response_xDLMS;
                    Response_xDLMS.Encrypt(pSuite, Request.m_SecurityOptions, xDLMS::InitiateResponse(*pRequest_xDLMS).GetBytes());
                    pResponse_xDLMS = std::make_unique<xDLMS::InitiateResponseVariant>(Response_xDLMS);
                }
            }
            else
            {
                Result = APPOpenConfirmOrResponse::AssociationResultType::rejected_permanent;
            }
        }
        APPOpenConfirmOrResponse
            Response(SAP(),
                     Request.m_SourceAddress,
                     *pResponse_xDLMS,
                     Request.m_SecurityOptions,
                     Result,
                     APPOpenConfirmOrResponse::DiagnosticSourceType::acse_service_user,
                     APPOpenConfirmOrResponse::UserDiagnosticType::user_null);
        if (not m_Association.RegisterAssociation(Response) or not m_pServer->OpenResponse(Response))
        {
            m_Association.ReleaseTransientAssociations();
            return false;
        }
        return true;
    }

    bool LogicalDevice::InitiateGet(const APPGetRequestOrIndication& Request, bool UpperLayerAllowed)
    {
        if (IsForMe(Request))
        {
            const AssociationContext* pContext = m_Association.GetAssociationContext(Request);
            if (pContext and Request.m_pGloRequest)     // Himanshu - GLO
            {
                DLMSVector Plaintext = Request.m_pGloRequest->Decrypt(pContext->m_SecurityOptions.SecurityContext.GetSecuritySuite(), pContext->m_SecurityOptions);
                std::unique_ptr<Get_Request_Normal> pNormalRequest = std::make_unique<Get_Request_Normal>();
                if (pNormalRequest->Parse(&Plaintext, Request.m_SourceAddress, Request.m_DestinationAddress))
                {
                    return InitiateGet(
                        APPGetRequestOrIndication(
                            Request.m_SourceAddress,
                            Request.m_DestinationAddress,
                            pNormalRequest->invoke_id_and_priority,
                            pNormalRequest->cosem_attribute_descriptor
                        ),
                        UpperLayerAllowed
                    );
                }
            }
            // ToDo - pSelectiveAccess
            InvokeIdAndPriorityType    InvokeID = COSEM_GET_INVOKE_ID(Request.m_InvokeIDAndPriority);
            switch (Request.m_Type)
            {
            case APPGetRequestOrIndication::GetRequestType::get_request_normal:
                {
                    DLMSVector Data;
                    APDUConstants::Data_Access_Result Result = APDUConstants::Data_Access_Result::scope_of_access_violated;
                    if (pContext)
                    {
                        ssize_t ObjectIndex = FindObject(Request.m_Parameter.get<Cosem_Attribute_Descriptor>());
                        if (ObjectIndex != -1)
                        {
                            Result = m_Objects[ObjectIndex]->Get(
                                    *pContext,
                                    &Data,
                                    Request.m_Parameter.get<Cosem_Attribute_Descriptor>()
                                );
                        }
                        else
                        {
                            Result = EPRI::APDUConstants::Data_Access_Result::object_unavailable;
                        }
                    }
                    //
                    // Get the data for this attribute and object
                    //
                    LOG_ALL("12: XXXResponse\r\n");		// ToDo - check breakpoint
                    return m_pServer->GetResponse(
                        APPGetConfirmOrResponse(SAP(),
                                                Request.m_SourceAddress,
                                                Request.m_InvokeIDAndPriority,
                                                (Result == APDUConstants::Data_Access_Result::success ?
                                                    Get_Data_Result(Data) :
                                                    Result)));
                }
                break;

            default:
                throw std::logic_error("InitiateGet Type Not Implemented!");
            }
        }
        return false;
    }

    bool LogicalDevice::InitiateSet(const APPSetRequestOrIndication& Request, bool UpperLayerAllowed)
    {
        if (IsForMe(Request))
        {
            const AssociationContext * pContext = m_Association.GetAssociationContext(Request);
            if (pContext and Request.m_pGloRequest)     // Himanshu - GLO
            {
                DLMSVector Plaintext = Request.m_pGloRequest->Decrypt(pContext->m_SecurityOptions.SecurityContext.GetSecuritySuite(), pContext->m_SecurityOptions);
                std::unique_ptr<Set_Request_Normal> pNormalRequest = std::make_unique<Set_Request_Normal>();
                if (pNormalRequest->Parse(&Plaintext, Request.m_SourceAddress, Request.m_DestinationAddress))
                {
                    return InitiateSet(
                        APPSetRequestOrIndication(
                            Request.m_SourceAddress,
                            Request.m_DestinationAddress,
                            pNormalRequest->invoke_id_and_priority,
                            pNormalRequest->cosem_attribute_descriptor,
                            pNormalRequest->value
                        ),
                        UpperLayerAllowed
                    );
                }
            }
            InvokeIdAndPriorityType    InvokeID = COSEM_GET_INVOKE_ID(Request.m_InvokeIDAndPriority);
            switch (Request.m_Type)
            {
            case APPSetRequestOrIndication::SetRequestType::set_request_normal:
                {
                    APDUConstants::Data_Access_Result Result =
                                                        APDUConstants::Data_Access_Result::scope_of_access_violated;
                    if (pContext)
                    {
                        ssize_t ObjectIndex =
                            FindObject(Request.m_Parameter.get<Cosem_Attribute_Descriptor>());
                        if (ObjectIndex != -1)
                        {
                            Result = m_Objects[ObjectIndex]->Set(*pContext,
                                                                 Request.m_Parameter.get<Cosem_Attribute_Descriptor>(),
                                                                 Request.m_Value);
                        }
                        else
                        {
                            Result = EPRI::APDUConstants::Data_Access_Result::object_unavailable;
                        }

                    }
                    return m_pServer->SetResponse(
                                        APPSetConfirmOrResponse(SAP(),
                                            Request.m_SourceAddress,
                                            Request.m_InvokeIDAndPriority,
                                            Result));

                }
                break;

            default:
                throw std::logic_error("InitiateSet Type Not Implemented!");

            }
        }
        return false;
    }

    bool LogicalDevice::InitiateAction(const APPActionRequestOrIndication& Request, bool UpperLayerAllowed)
    {
        if (IsForMe(Request))
        {
            const AssociationContext * pContext = m_Association.GetAssociationContext(Request);
            if (pContext and Request.m_pGloRequest)     // Himanshu - GLO
            {
                DLMSVector Plaintext = Request.m_pGloRequest->Decrypt(pContext->m_SecurityOptions.SecurityContext.GetSecuritySuite(), pContext->m_SecurityOptions);
                std::unique_ptr<Action_Request_Normal> pNormalRequest = std::make_unique<Action_Request_Normal>();
                if (pNormalRequest->Parse(&Plaintext, Request.m_SourceAddress, Request.m_DestinationAddress))
                {
                    return InitiateAction(
                        APPActionRequestOrIndication(
                            Request.m_SourceAddress,
                            Request.m_DestinationAddress,
                            pNormalRequest->invoke_id_and_priority,
                            pNormalRequest->cosem_method_descriptor,
                            pNormalRequest->method_invocation_parameters
                        ),
                        UpperLayerAllowed
                    );
                }
            }
            InvokeIdAndPriorityType    InvokeID = COSEM_GET_INVOKE_ID(Request.m_InvokeIDAndPriority);
            switch (Request.m_Type)
            {
            case APPActionRequestOrIndication::ActionRequestType::action_request_normal:
                {
                    APDUConstants::Action_Result Result =
                    APDUConstants::Action_Result::scope_of_access_violated;
                    if (pContext)
                    {
                        ssize_t ObjectIndex =
                            FindObject(Request.m_Parameter.get<Cosem_Method_Descriptor>());
                        if (ObjectIndex != -1)
                        {
                            Result = m_Objects[ObjectIndex]->Action(*pContext,
                                                                    Request.m_Parameter.get<Cosem_Method_Descriptor>(),
                                                                    Request.m_ActionParameters);
                        }
                        else
                        {
                            Result = EPRI::APDUConstants::Action_Result::object_unavailable;
                        }
                    }
                    return m_pServer->ActionResponse(APPActionConfirmOrResponse(SAP(),
                                                        Request.m_SourceAddress,
                                                        Request.m_InvokeIDAndPriority,
                                                        Result));
                }
                break;

            default:
                throw std::logic_error("InitiateAction Type Not Implemented!");

            }
        }
        return false;
    }

    bool LogicalDevice::InitiateRelease(const APPReleaseRequestOrIndication& Request, bool UpperLayerAllowed)
    {
        std::unique_ptr<xDLMS::InitiateResponseVariant> pResponse_xDLMS;        // Himanshu - GLO
        if (Request.m_xDLMS.IsPlain())
        {
            pResponse_xDLMS = std::make_unique<xDLMS::InitiateResponseVariant>(xDLMS::InitiateResponse(Request.m_xDLMS.GetPlainRequest()));
        }
        else if (Request.m_xDLMS.IsGloCiphered())
        {
            const std::shared_ptr<ISecuritySuite> pSuite = m_Association.GetSecuritySetup(Request.m_SourceAddress);
            if (pSuite)
            {
                DLMSVector Plaintext = Request.m_xDLMS.GetGloRequest().Decrypt(pSuite, m_Association.GetAssociationContext(Request)->m_SecurityOptions);
                std::unique_ptr<xDLMS::InitiateRequest> pRequest_xDLMS = std::make_unique<xDLMS::InitiateRequest>();
                if (pRequest_xDLMS->Parse(&Plaintext))
                {
                    xDLMS::GLO::InitiateResponse Response_xDLMS;
                    Response_xDLMS.Encrypt(pSuite, m_Association.GetAssociationContext(Request)->m_SecurityOptions, xDLMS::InitiateResponse(*pRequest_xDLMS).GetBytes());
                    pResponse_xDLMS = std::make_unique<xDLMS::InitiateResponseVariant>(Response_xDLMS);
                }
            }
        }
        else if (not Request.m_xDLMS.Initialized())
        {
            pResponse_xDLMS = std::make_unique<xDLMS::InitiateResponseVariant>(xDLMS::InitiateResponse());
        }
        if (!pResponse_xDLMS)
        {
            return false;
        }
        APPReleaseConfirmOrResponse Response(SAP(),
            Request.m_SourceAddress,
            *pResponse_xDLMS,
            Request.m_UseRLRQRLRE,
            UpperLayerAllowed ? APPReleaseConfirmOrResponse::ReleaseReason::normal :
                  APPReleaseConfirmOrResponse::ReleaseReason::not_finished);
        if (m_pServer->ReleaseResponse(Response))
        {
            return !UpperLayerAllowed || m_Association.ReleaseAssociation(Response);
        }
        return false;
    }

    // Himanshu - ACCESS
    bool LogicalDevice::InitiateAccess(const APPAccessRequestOrIndication& Request, bool UpperLayerAllowed)
    {
        if (IsForMe(Request))
        {
            const AssociationContext * pContext = m_Association.GetAssociationContext(Request);
            if (pContext and Request.m_pGloRequest)     // Himanshu - GLO
            {
                DLMSVector Plaintext = Request.m_pGloRequest->Decrypt(pContext->m_SecurityOptions.SecurityContext.GetSecuritySuite(), pContext->m_SecurityOptions);
                std::unique_ptr<Access_Request> pRequest = std::make_unique<Access_Request>();
                if (pRequest->Parse(&Plaintext, Request.m_SourceAddress, Request.m_DestinationAddress))
                {
                    return InitiateAccess(
                        APPAccessRequestOrIndication(
                            Request.m_SourceAddress,
                            Request.m_DestinationAddress,
                            pRequest->long_invoke_id_and_priority,
                            pRequest->date_time,
                            pRequest->access_request_list_of_spec,
                            pRequest->access_request_list_of_data
                        ),
                        UpperLayerAllowed
                    );
                }
            }
            InvokeIdAndPriorityType    InvokeID = COSEM_GET_INVOKE_ID_FROM_LONG(Request.m_LongInvokeIDAndPriority);

            APPAccessConfirmOrResponse::AccessResponseSpecs Results;
            APPAccessConfirmOrResponse::AccessResponseDatas Datas;

            for (int i = 0; i < Request.m_AccessParameters.size(); i++)
            {
                AccessRequestSpecification Specification = Request.m_AccessParameters[i];
                AccessRequestData RequestData = Request.m_AccessDatas[i];
                switch (Specification.m_Choice)
                {
                case APPAccessRequestOrIndication::AccessRequestType::access_request_get:
                    {
                        DLMSVector Data;
                        APDUConstants::Data_Access_Result Result = APDUConstants::Data_Access_Result::scope_of_access_violated;
                        if (pContext)
                        {
                            ssize_t ObjectIndex =
                                FindObject(Specification.m_Descriptor);
                            if (ObjectIndex != -1)
                            {
                                Result = m_Objects[ObjectIndex]->Get(*pContext,
                                                &Data,
                                                Specification.m_Descriptor
                                            );
                            }
                            else
                            {
                                Result = EPRI::APDUConstants::Data_Access_Result::object_unavailable;
                            }
                        }
                        Results.push_back({
                            APPAccessConfirmOrResponse::AccessResponseType::access_response_get,
                            Result
                        });
                        Datas.push_back(Data.Size() ? Data : DLMSVector({COSEMDataType::NULL_DATA}));
                    }
                    break;

                default:
                    throw std::logic_error("InitiateAccess Type Not Implemented!");

                }
            }
            return m_pServer->AccessResponse(APPAccessConfirmOrResponse(SAP(),
                    Request.m_SourceAddress,
                    Request.m_LongInvokeIDAndPriority,
                    Request.m_DateTime,
                    Results,
                    Datas,
                    nullptr
                ));
        }
        return false;
    }

    COSEMAddressType LogicalDevice::SAP() const
    {
        return dynamic_cast<COSEM *>(m_pServer)->GetAddress();
    }

    COSEMAddressType LogicalDevice::GetAssociatedAddress() const
    {
        return m_Association.GetAssociatedAddress();
    }

    void LogicalDevice::RegisterObject(ICOSEMObject * pObject)
    {
        m_Objects.push_back(pObject);
    }

    ssize_t LogicalDevice::FindObject(const Cosem_Attribute_Descriptor& Descriptor) const
    {
        ssize_t RetVal = 0;
        for (; RetVal < m_Objects.size(); ++RetVal)
        {
            if (m_Objects[RetVal]->Supports(Descriptor))
            {
                return RetVal;
            }
        }
        return -1;
    }

    ssize_t LogicalDevice::FindObject(const Cosem_Method_Descriptor& Descriptor) const
    {
        ssize_t RetVal = 0;
        for (; RetVal < m_Objects.size(); ++RetVal)
        {
            if (m_Objects[RetVal]->Supports(Descriptor))
            {
                return RetVal;
            }
        }
        return -1;
    }

    bool LogicalDevice::IsForMe(const APPBaseCallbackParameter& Parameter) const
    {
        return SAP() == Parameter.m_DestinationAddress ||
            Parameter.m_DestinationAddress == ReservedAddresses::BROADCAST;
    }

    void LogicalDevice::ReleaseTransientAssociations()
    {
        m_Association.ReleaseTransientAssociations();
    }
}
