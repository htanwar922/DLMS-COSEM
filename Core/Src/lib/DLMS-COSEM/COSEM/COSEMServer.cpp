// ===========================================================================
// Copyright (c) 2018, Electric Power Research Institute (EPRI)
// All rights reserved.
//
// DLMS-COSEM ("this software") is licensed under BSD 3-Clause license.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// *  Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// *  Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// *  Neither the name of EPRI nor the names of its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
// OF SUCH DAMAGE.
//
// This EPRI software incorporates work covered by the following copyright and permission
// notices. You may not use these works except in compliance with their respective
// licenses, which are provided below.
//
// These works are provided by the copyright holders and contributors "as is" and any express or
// implied warranties, including, but not limited to, the implied warranties of merchantability
// and fitness for a particular purpose are disclaimed.
//
// This software relies on the following libraries and licenses:
//
// ###########################################################################
// Boost Software License, Version 1.0
// ###########################################################################
//
// * asio v1.10.8 (https://sourceforge.net/projects/asio/files/)
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//

#include <algorithm>

#include "COSEM/COSEM.h"
#include "ITemplates/ISocket.h"

namespace EPRI
{
    COSEMServer::COSEMServer(COSEMAddressType SAP) :
        COSEM(SAP),
        LogicalDevice(this)
    {
    }

    COSEMServer::~COSEMServer()
    {
    }
    //
    // COSEM
    //
    COSEMRunResult COSEMServer::Process()
    {
        return COSEMRunResult::COSEM_RUN_WAIT;
    }
    //
    // COSEM-OPEN Service
    //
    bool COSEMServer::OpenResponse(const APPOpenConfirmOrResponse& Parameters)
    {
        bool bAllowed = false;
        BEGIN_TRANSITION_MAP
            TRANSITION_MAP_ENTRY(ST_INACTIVE, ST_IGNORED)
            TRANSITION_MAP_ENTRY(ST_IDLE, ST_IGNORED)
            TRANSITION_MAP_ENTRY(ST_ASSOCIATION_PENDING, ST_ASSOCIATION_PENDING)
            TRANSITION_MAP_ENTRY(ST_ASSOCIATION_RELEASE_PENDING, ST_IGNORED)
            TRANSITION_MAP_ENTRY(ST_ASSOCIATED, ST_IGNORED)
        END_TRANSITION_MAP(bAllowed, new OpenResponseEventData(Parameters));
        return bAllowed;
    }

    bool COSEMServer::OnOpenIndication(const APPOpenRequestOrIndication& Parameters)
    {
        //
        // Default Handler Does Nothing
        //
        return true;
    }
    //
    // COSEM-GET Service
    //
    bool COSEMServer::GetResponse(const APPGetConfirmOrResponse& Parameters)
    {
    	LOG_ALL("STATE MACHINE INIT FOR RESPONSE\r\n");		// ToDo - check breakpoint
        bool bAllowed = false;
        BEGIN_TRANSITION_MAP
            TRANSITION_MAP_ENTRY(ST_INACTIVE, ST_IGNORED)
            TRANSITION_MAP_ENTRY(ST_IDLE, ST_IGNORED)
            TRANSITION_MAP_ENTRY(ST_ASSOCIATION_PENDING, ST_IGNORED)
            TRANSITION_MAP_ENTRY(ST_ASSOCIATION_RELEASE_PENDING, ST_IGNORED)
            TRANSITION_MAP_ENTRY(ST_ASSOCIATED, ST_ASSOCIATED)
        END_TRANSITION_MAP(bAllowed, new GetResponseEventData(Parameters));
        return bAllowed;
    }

    bool COSEMServer::OnGetIndication(const APPGetRequestOrIndication& Parameters)
    {
    	// ToDo - may want to do something with received GET request here
        //
        // Default Handler Does Nothing
        //
        return true;
    }
    //
    // COSEM-SET Service
    //
    bool COSEMServer::SetResponse(const APPSetConfirmOrResponse& Parameters)
    {
        bool bAllowed = false;
        BEGIN_TRANSITION_MAP
            TRANSITION_MAP_ENTRY(ST_INACTIVE, ST_IGNORED)
            TRANSITION_MAP_ENTRY(ST_IDLE, ST_IGNORED)
            TRANSITION_MAP_ENTRY(ST_ASSOCIATION_PENDING, ST_IGNORED)
            TRANSITION_MAP_ENTRY(ST_ASSOCIATION_RELEASE_PENDING, ST_IGNORED)
            TRANSITION_MAP_ENTRY(ST_ASSOCIATED, ST_ASSOCIATED)
        END_TRANSITION_MAP(bAllowed, new SetResponseEventData(Parameters));
        return bAllowed;
    }

    bool COSEMServer::OnSetIndication(const APPSetRequestOrIndication& Parameters)
    {
        //
        // Default Handler Does Nothing
        //
        return true;
    }
    //
    // COSEM-ACTION Service
    //
    bool COSEMServer::ActionResponse(const APPActionConfirmOrResponse& Parameters)
    {
        bool bAllowed = false;
        BEGIN_TRANSITION_MAP
            TRANSITION_MAP_ENTRY(ST_INACTIVE, ST_IGNORED)
            TRANSITION_MAP_ENTRY(ST_IDLE, ST_IGNORED)
            TRANSITION_MAP_ENTRY(ST_ASSOCIATION_PENDING, ST_IGNORED)
            TRANSITION_MAP_ENTRY(ST_ASSOCIATION_RELEASE_PENDING, ST_IGNORED)
            TRANSITION_MAP_ENTRY(ST_ASSOCIATED, ST_ASSOCIATED)
        END_TRANSITION_MAP(bAllowed, new ActionResponseEventData(Parameters));
        return bAllowed;
    }

    bool COSEMServer::OnActionIndication(const APPActionRequestOrIndication& Parameters)
    {
        //
        // Default Handler Does Nothing
        //
        return true;
    }
    //
    // COSEM-RELEASE Service
    //
    bool COSEMServer::ReleaseResponse(const APPReleaseConfirmOrResponse& Parameters)
    {
        bool bAllowed = false;
        BEGIN_TRANSITION_MAP
            TRANSITION_MAP_ENTRY(ST_INACTIVE, ST_IGNORED)
            TRANSITION_MAP_ENTRY(ST_IDLE, ST_IGNORED)
            TRANSITION_MAP_ENTRY(ST_ASSOCIATION_PENDING, ST_IGNORED)
            TRANSITION_MAP_ENTRY(ST_ASSOCIATION_RELEASE_PENDING, ST_ASSOCIATION_RELEASE_PENDING)
            TRANSITION_MAP_ENTRY(ST_ASSOCIATED, ST_IGNORED)
        END_TRANSITION_MAP(bAllowed, new ReleaseResponseEventData(Parameters));
        return bAllowed;
    }

    bool COSEMServer::OnReleaseIndication(const APPReleaseRequestOrIndication& Parameters)
    {
        //
        // Default Handler Does Nothing
        //
        return true;
    }
    //
    // COSEM-ABORT Service
    //
    bool COSEMServer::OnAbortIndication(const APPAbortIndication& Parameters)
    {
        //
        // Default Handler Does Nothing
        //
        return true;
    }
    //
    // COSEM-ACCESS Service - Himanshu - ACCESS
    //
    bool COSEMServer::AccessResponse(const APPAccessConfirmOrResponse& Parameters)
    {
        bool bAllowed = false;
        BEGIN_TRANSITION_MAP
            TRANSITION_MAP_ENTRY(ST_INACTIVE, ST_IGNORED)
            TRANSITION_MAP_ENTRY(ST_IDLE, ST_IGNORED)
            TRANSITION_MAP_ENTRY(ST_ASSOCIATION_PENDING, ST_IGNORED)
            TRANSITION_MAP_ENTRY(ST_ASSOCIATION_RELEASE_PENDING, ST_IGNORED)
            TRANSITION_MAP_ENTRY(ST_ASSOCIATED, ST_ASSOCIATED)
        END_TRANSITION_MAP(bAllowed, new AccessResponseEventData(Parameters));
        return bAllowed;
    }

    bool COSEMServer::OnAccessIndication(const APPAccessRequestOrIndication& Parameters)
    {
        //
        // Default Handler Does Nothing
        //
        return true;
    }

    //
	// State Machine Handlers
    //
    void COSEMServer::ST_Inactive_Handler(EventData * pData)
    {
        TransportEventData * pTransportData = dynamic_cast<TransportEventData *>(pData);
        if (pTransportData && pTransportData->Data == Transport::TRANSPORT_DISCONNECTED)
        {
            //
            // TODO - Phase II.  When there are more than one association.
            //
            LOG_ALWAYS("Abort Indication from Client.\r\n");		// Himanshu
            OnAbortIndication(APPAbortIndication(GetAssociatedAddress(), GetAddress()));
        }
        ReleaseTransientAssociations();
    }

    void COSEMServer::ST_Idle_Handler(EventData * pData)
    {
        ReleaseTransientAssociations();
    }

    void COSEMServer::ST_Association_Pending_Handler(EventData * pData)
    {
    	LOG_ALL("6:1/13.0:1: Inside SM Handler : AssocPend\r\n");		// ToDo - check breakpoint
        //
        // Receive OPEN Request
        //
        OpenRequestEventData * pOpenRequest = dynamic_cast<OpenRequestEventData *>(pData);
        if (pOpenRequest)
        {
            APPOpenRequestOrIndication& Parameters = pOpenRequest->Data;
            InitiateOpen(Parameters,
                OnOpenIndication(Parameters));
            return;
        }
        //
        // Transmit OPEN Response
        //
        Transport *             pTransport = GetTransport();
        OpenResponseEventData * pOpenResponse = dynamic_cast<OpenResponseEventData *>(pData);
        if (pTransport && pOpenResponse)
        {
            Transport::DataRequestParameter TransportParam;
            AARE                            Response;
            bool                            Associated = false;
            APPOpenConfirmOrResponse&       Parameters = pOpenResponse->Data;
            if (Parameters.ToAPDU(&Response))
            {
                TransportParam.SourceAddress = GetAddress();
                TransportParam.DestinationAddress = Parameters.m_DestinationAddress;
                TransportParam.Data = Response.GetBytes();
                Associated = pTransport->DataRequest(TransportParam);           // NOTE - Himanshu - TODO
            }
            if (Associated)
            {
                InternalEvent(ST_ASSOCIATED);
            }
            else
            {
                InternalEvent(ST_IDLE);
            }
            LOG_DEBUG("HERE : State === %u\r\n", m_CurrentState);
            return;
        }

    }

    void COSEMServer::ST_Association_Release_Pending_Handler(EventData * pData)
    {
        //
        // Receive RELEASE Request
        //
        ReleaseRequestEventData * pEventData;
        if ((pEventData = dynamic_cast<ReleaseRequestEventData *>(pData)) != nullptr)
        {
            APPReleaseRequestOrIndication& Parameters = pEventData->Data;
            InitiateRelease(Parameters,
                OnReleaseIndication(Parameters));
            return;
        }
        //
        // Transmit RELEASE Response
        //
        Transport *                pTransport = GetTransport();
        ReleaseResponseEventData * pReleaseResponse = dynamic_cast<ReleaseResponseEventData *>(pData);
        if (pTransport && pReleaseResponse)
        {
            Transport::DataRequestParameter TransportParam;
            RLRE                            Response;
            bool                            Released = false;
            APPReleaseConfirmOrResponse&    Parameters = pReleaseResponse->Data;
            if (Parameters.ToAPDU(&Response))
            {
                TransportParam.SourceAddress = GetAddress();
                TransportParam.DestinationAddress = Parameters.m_DestinationAddress;
                TransportParam.Data = Response.GetBytes();
                Released = pTransport->DataRequest(TransportParam);
            }
            if (Released)
            {
                InternalEvent(ST_IDLE);
            }
            return;
        }
    }

    void COSEMServer::ST_Associated_Handler(EventData * pData)
    {
    	LOG_ALL("6:1/13.0:0: Inside SM Handler : Associated\r\n");		// ToDo - check breakpoint
        //
        // OPEN Transition
        //
        OpenRequestEventData * pOpenRequest = dynamic_cast<OpenRequestEventData *>(pData);
        if (pOpenRequest)
        {
            return;
        }
        //
        // Received GET Request
        //
        GetRequestEventData * pGetRequest = dynamic_cast<GetRequestEventData *>(pData);
        if (pGetRequest)
        {
        	LOG_ALL("6:2: Inside SM Handler : GetRequestEvent OnXXXIndication and InitiateXXX\r\n");		// ToDo - check breakpoint
            InitiateGet(pGetRequest->Data,
                OnGetIndication(pGetRequest->Data));
            return;
        }
        //
        // Transmit GET Response
        //
        Transport *            pTransport = GetTransport();
        GetResponseEventData * pGetResponse = dynamic_cast<GetResponseEventData *>(pData);
        if (pTransport && pGetResponse)
        {
            LOG_ALL("13.1: Inside SM Handler : GetRequestEvent\r\n");		// ToDo - check breakpoint
            Transport::DataRequestParameter TransportParam;

            switch (pGetResponse->Data.m_Type)
            {
            case APPGetConfirmOrResponse::GetResponseType::get_response_normal:
                {
                    Get_Response_Normal Response;
                    Response.invoke_id_and_priority = pGetResponse->Data.m_InvokeIDAndPriority;
                    Response.result = pGetResponse->Data.m_Result;

                    TransportParam.SourceAddress = GetAddress();
                    TransportParam.DestinationAddress = pGetResponse->Data.m_DestinationAddress;

                    const AssociationContext* pContext = m_Association.GetAssociationContext(pGetResponse->Data.m_DestinationAddress);
                    if (pContext->m_SecurityOptions.Encryption())
                    {
                        GLO::Get_Response EncryptedResponse;
                        EncryptedResponse.Encrypt(pContext->m_SecurityOptions.SecurityContext.GetSecuritySuite()
                            , pContext->m_SecurityOptions
                            , Response.GetBytes());
                        TransportParam.Data = EncryptedResponse.GetBytes();
                    }
                    else
                    {
                        TransportParam.Data = Response.GetBytes();
                    }
                }
                break;

            case APPGetConfirmOrResponse::GetResponseType::get_response_next:
                throw std::logic_error("get_response_next Not Implemented!");

            case APPGetConfirmOrResponse::GetResponseType::get_response_with_list:
                throw std::logic_error("get_response_with_list Not Implemented!");
            }

            pTransport->DataRequest(TransportParam);

            return;
        }
        //
        // Received SET Request
        //
        SetRequestEventData * pSetRequest = dynamic_cast<SetRequestEventData *>(pData);
        if (pSetRequest)
        {
            InitiateSet(pSetRequest->Data,
                OnSetIndication(pSetRequest->Data));
            return;
        }
        //
        // Transmit SET Response
        //
        SetResponseEventData * pSetResponse = dynamic_cast<SetResponseEventData *>(pData);
        if (pTransport && pSetResponse)
        {
            Transport::DataRequestParameter TransportParam;

            switch (pSetResponse->Data.m_Type)
            {
            case APPSetConfirmOrResponse::SetResponseType::set_response_normal:
                {
                    Set_Response_Normal Response;
                    const APPSetConfirmOrResponse& Parameters = pSetResponse->Data;

                    Response.invoke_id_and_priority = Parameters.m_InvokeIDAndPriority;
                    Response.result = Parameters.m_Result;

                    TransportParam.SourceAddress = GetAddress();
                    TransportParam.DestinationAddress = Parameters.m_DestinationAddress;

                    const AssociationContext* pContext = m_Association.GetAssociationContext(Parameters.m_DestinationAddress);
                    if (pContext->m_SecurityOptions.Encryption())
                    {
                        GLO::Set_Response EncryptedResponse;
                        EncryptedResponse.Encrypt(pContext->m_SecurityOptions.SecurityContext.GetSecuritySuite()
                            , pContext->m_SecurityOptions
                            , Response.GetBytes());
                        TransportParam.Data = EncryptedResponse.GetBytes();
                    }
                    else
                    {
                        TransportParam.Data = Response.GetBytes();
                    }
            }
                break;

            case APPSetConfirmOrResponse::SetResponseType::set_response_with_first_datablock :
                throw std::logic_error("set_response_with_first_datablock Not Implemented!");

            case APPSetConfirmOrResponse::SetResponseType::set_response_with_datablock :
                throw std::logic_error("set_response_with_datablock Not Implemented!");

            case APPSetConfirmOrResponse::SetResponseType::set_response_with_list :
                throw std::logic_error("set_response_with_list Not Implemented!");

            case APPSetConfirmOrResponse::SetResponseType::set_response_with_list_and_first_datablock :
                throw std::logic_error("set_response_with_list_and_first_datablock Not Implemented!");
            }

            pTransport->DataRequest(TransportParam);

            return;
        }
        //
        // Received ACTION Request
        //
        ActionRequestEventData * pActionRequest = dynamic_cast<ActionRequestEventData *>(pData);
        if (pActionRequest)
        {
            InitiateAction(pActionRequest->Data,
                OnActionIndication(pActionRequest->Data));
            return;
        }
        //
        // Transmit ACTION Response
        //
        ActionResponseEventData * pActionResponse = dynamic_cast<ActionResponseEventData *>(pData);
        if (pTransport && pActionResponse)
        {
            Transport::DataRequestParameter TransportParam;

            switch (pActionResponse->Data.m_Type)
            {
            case APPActionConfirmOrResponse::ActionResponseType::action_response_normal:
                {
                    Action_Response_Normal            Response;
                    const APPActionConfirmOrResponse& Parameters = pActionResponse->Data;

                    Response.invoke_id_and_priority = Parameters.m_InvokeIDAndPriority;
                    Response.single_response.result = Parameters.m_Result;

                    TransportParam.SourceAddress = GetAddress();
                    TransportParam.DestinationAddress = Parameters.m_DestinationAddress;

                    const AssociationContext* pContext = m_Association.GetAssociationContext(Parameters.m_DestinationAddress);
                    if (pContext->m_SecurityOptions.Encryption())
                    {
                        GLO::Action_Response EncryptedResponse;
                        EncryptedResponse.Encrypt(pContext->m_SecurityOptions.SecurityContext.GetSecuritySuite()
                            , pContext->m_SecurityOptions
                            , Response.GetBytes());
                        TransportParam.Data = EncryptedResponse.GetBytes();
                    }
                    else
                    {
                        TransportParam.Data = Response.GetBytes();
                    }
            }
                break;

            default:
                throw std::logic_error("Action Response Not Implemented!");

            }

            pTransport->DataRequest(TransportParam);

            return;
        }
        //
        // Received ACCESS Request - Himanshu - ACCESS
        //
        AccessRequestEventData * pAccessRequest = dynamic_cast<AccessRequestEventData *>(pData);
        if (pAccessRequest)
        {
            InitiateAccess(pAccessRequest->Data,
                OnAccessIndication(pAccessRequest->Data));
            return;
        }
        //
        // Transmit ACCESS Response - Himanshu - ACCESS
        //
        AccessResponseEventData * pAccessResponse = dynamic_cast<AccessResponseEventData *>(pData);
        if (pTransport && pAccessResponse)
        {
            Access_Response Response;
            Response.long_invoke_id_and_priority = pAccessResponse->Data.m_LongInvokeIDAndPriority;
            Response.date_time = pAccessResponse->Data.m_DateTime;
            Response.access_response_list_of_spec = pAccessResponse->Data.m_AccessResults;
            Response.access_response_list_of_data = pAccessResponse->Data.m_AccessDatas;
            if (pAccessResponse->Data.m_pAccessRequestSpecs)
                Response.access_request_list_of_spec = *pAccessResponse->Data.m_pAccessRequestSpecs;

            Transport::DataRequestParameter TransportParam;
            TransportParam.SourceAddress = GetAddress();
            TransportParam.DestinationAddress = pAccessResponse->Data.m_DestinationAddress;

            const AssociationContext* pContext = m_Association.GetAssociationContext(pAccessResponse->Data.m_DestinationAddress);
            if (pContext->m_SecurityOptions.Encryption())
            {
                if (pContext->m_SecurityOptions.CallingAPTitle == DLMSVector(GuruxCLIClientSystemTitle))
                {
                    GLO::Access_Response EncryptedResponse;
                    EncryptedResponse.Encrypt(pContext->m_SecurityOptions.SecurityContext.GetSecuritySuite()
                        , pContext->m_SecurityOptions
                        , Response.GetBytes());
                    TransportParam.Data = EncryptedResponse.GetBytes();
                }
                else
                {
                    GLO::General_Glo_Ciphering EncryptedResponse;
                    TransportParam.Data = EncryptedResponse.Encrypt(
                        pContext->m_SecurityOptions.SecurityContext.GetSecuritySuite()
                        , pContext->m_SecurityOptions
                        , Response.GetBytes());
                }

            }
            else
            {
                TransportParam.Data = Response.GetBytes();
            }

            pTransport->DataRequest(TransportParam);

            return;
        }

    }
    //
    // APDU Handlers
    //
    bool COSEMServer::AARE_Handler(const IAPDUPtr& pAPDU)
    {
        return false;
    }

    bool COSEMServer::AARQ_Handler(const IAPDUPtr& pAPDU)
    {
    	LOG_ALL("5:1: APDUHandler\r\n");		// ToDo - check breakpoint
        AARQ *  pAARQ = dynamic_cast<AARQ *>(pAPDU.get());
        if (pAARQ)
        {
        	LOG_ALL("5:1.0: AARQ_Handler : State == %u\r\n", m_CurrentState);		// ToDo - check breakpoint
        	//osDelay(100);
            bool bAllowed = false;
            try
            {
                BEGIN_TRANSITION_MAP
                    TRANSITION_MAP_ENTRY(ST_INACTIVE, ST_IGNORED)
                    TRANSITION_MAP_ENTRY(ST_IDLE, ST_ASSOCIATION_PENDING)
                    TRANSITION_MAP_ENTRY(ST_ASSOCIATION_PENDING, ST_IGNORED)
                    TRANSITION_MAP_ENTRY(ST_ASSOCIATION_RELEASE_PENDING, ST_IGNORED)
                    TRANSITION_MAP_ENTRY(ST_ASSOCIATED, ST_IGNORED)
                END_TRANSITION_MAP(bAllowed, new OpenRequestEventData(APPOpenRequestOrIndication(pAARQ)));
            }
            catch (const std::exception&)
            {
            }

        	LOG_ALL("5:1.1: AARQ_Handler : State == %u\r\n", m_CurrentState);
        	//osDelay(1000);
            return bAllowed;
        }
        return false;
    }

    bool COSEMServer::GET_Request_Handler(const IAPDUPtr& pAPDU)
    {
    	LOG_ALL("5:2: APDUHandler\r\n");		// ToDo - check breakpoint
        GetRequestEventData * pEvent = nullptr;
        Get_Request_Normal *  pNormalRequest = dynamic_cast<Get_Request_Normal *>(pAPDU.get());
        GLO::Get_Request *    pGLORequest = dynamic_cast<GLO::Get_Request *>(pAPDU.get());  // Himanshu - GLO
        if (pNormalRequest)
        {
            pEvent = new GetRequestEventData(APPGetRequestOrIndication(
                pAPDU->GetSourceAddress(),
                pAPDU->GetDestinationAddress(),
                pNormalRequest->invoke_id_and_priority,
                pNormalRequest->cosem_attribute_descriptor));
        }
        else if (pGLORequest)   // Himanshu - GLO
        {
            pEvent = new GetRequestEventData(APPGetRequestOrIndication(
                pAPDU->GetSourceAddress(),
                pAPDU->GetDestinationAddress(),
                *pGLORequest));
        }
        if (pEvent)
        {
        	LOG_DEBUG("STATE MACHINE INIT\r\n");
            bool bAllowed = false;
            BEGIN_TRANSITION_MAP
                TRANSITION_MAP_ENTRY(ST_INACTIVE, ST_IGNORED)
                TRANSITION_MAP_ENTRY(ST_IDLE, ST_IGNORED)
                TRANSITION_MAP_ENTRY(ST_ASSOCIATION_PENDING, ST_IGNORED)
                TRANSITION_MAP_ENTRY(ST_ASSOCIATION_RELEASE_PENDING, ST_IGNORED)
                TRANSITION_MAP_ENTRY(ST_ASSOCIATED, ST_ASSOCIATED)
            END_TRANSITION_MAP(bAllowed, pEvent);
            return bAllowed;
        }
        return false;
    }

    bool COSEMServer::GET_Response_Handler(const IAPDUPtr& pAPDU)
    {
        return false;
    }

    bool COSEMServer::SET_Request_Handler(const IAPDUPtr& pAPDU)
    {
        SetRequestEventData * pEvent = nullptr;
        Set_Request_Normal *  pNormalRequest = dynamic_cast<Set_Request_Normal *>(pAPDU.get());
        GLO::Set_Request *    pGLORequest = dynamic_cast<GLO::Set_Request *>(pAPDU.get());  // Himanshu - GLO
        if (pNormalRequest)
        {
            pEvent = new SetRequestEventData(APPSetRequestOrIndication(
                pAPDU->GetSourceAddress(),
                pAPDU->GetDestinationAddress(),
                pNormalRequest->invoke_id_and_priority,
                pNormalRequest->cosem_attribute_descriptor,
                pNormalRequest->value));
        }
        else if (pGLORequest)   // Himanshu - GLO
        {
            pEvent = new SetRequestEventData(APPSetRequestOrIndication(
                pAPDU->GetSourceAddress(),
                pAPDU->GetDestinationAddress(),
                *pGLORequest));
        }
        if (pEvent)
        {
            bool bAllowed = false;
            BEGIN_TRANSITION_MAP
                TRANSITION_MAP_ENTRY(ST_INACTIVE, ST_IGNORED)
                TRANSITION_MAP_ENTRY(ST_IDLE, ST_IGNORED)
                TRANSITION_MAP_ENTRY(ST_ASSOCIATION_PENDING, ST_IGNORED)
                TRANSITION_MAP_ENTRY(ST_ASSOCIATION_RELEASE_PENDING, ST_IGNORED)
                TRANSITION_MAP_ENTRY(ST_ASSOCIATED, ST_ASSOCIATED)
            END_TRANSITION_MAP(bAllowed, pEvent);
            return bAllowed;
        }
        return false;
    }

    bool COSEMServer::SET_Response_Handler(const IAPDUPtr& pAPDU)
    {
        return false;
    }

    bool COSEMServer::ACTION_Request_Handler(const IAPDUPtr& pAPDU)
    {
        ActionRequestEventData * pEvent = nullptr;
        Action_Request_Normal *  pNormalRequest = dynamic_cast<Action_Request_Normal *>(pAPDU.get());
        GLO::Action_Request *    pGLORequest = dynamic_cast<GLO::Action_Request *>(pAPDU.get());  // Himanshu - GLO
        if (pNormalRequest)
        {
            pEvent = new ActionRequestEventData(APPActionRequestOrIndication(
                pAPDU->GetSourceAddress(),
                pAPDU->GetDestinationAddress(),
                pNormalRequest->invoke_id_and_priority,
                pNormalRequest->cosem_method_descriptor,
                pNormalRequest->method_invocation_parameters));
        }
        else if (pGLORequest)   // Himanshu - GLO
        {
            pEvent = new ActionRequestEventData(APPActionRequestOrIndication(
                pAPDU->GetSourceAddress(),
                pAPDU->GetDestinationAddress(),
                *pGLORequest));
        }
        if (pEvent)
        {
            bool bAllowed = false;
            BEGIN_TRANSITION_MAP
                TRANSITION_MAP_ENTRY(ST_INACTIVE, ST_IGNORED)
                TRANSITION_MAP_ENTRY(ST_IDLE, ST_IGNORED)
                TRANSITION_MAP_ENTRY(ST_ASSOCIATION_PENDING, ST_IGNORED)
                TRANSITION_MAP_ENTRY(ST_ASSOCIATION_RELEASE_PENDING, ST_IGNORED)
                TRANSITION_MAP_ENTRY(ST_ASSOCIATED, ST_ASSOCIATED)
            END_TRANSITION_MAP(bAllowed, pEvent);
            return bAllowed;
        }
        return false;
    }

    bool COSEMServer::ACTION_Response_Handler(const IAPDUPtr& pAPDU)
    {
        return false;
    }

    bool COSEMServer::RLRQ_Handler(const IAPDUPtr& pAPDU)
    {
        bool    bAllowed = false;
        RLRQ *  pRLRQ = dynamic_cast<RLRQ *>(pAPDU.get());
        if (pRLRQ)
        {
            try
            {
                BEGIN_TRANSITION_MAP
                    TRANSITION_MAP_ENTRY(ST_INACTIVE, ST_IGNORED)
                    TRANSITION_MAP_ENTRY(ST_IDLE, ST_IGNORED)
                    TRANSITION_MAP_ENTRY(ST_ASSOCIATION_PENDING, ST_IGNORED)
                    TRANSITION_MAP_ENTRY(ST_ASSOCIATION_RELEASE_PENDING, ST_IGNORED)
                    TRANSITION_MAP_ENTRY(ST_ASSOCIATED, ST_ASSOCIATION_RELEASE_PENDING)
                END_TRANSITION_MAP(bAllowed, new ReleaseRequestEventData(APPReleaseRequestOrIndication(pRLRQ)));
            }
            catch (std::exception&)
            {
            }
        }
        return bAllowed;
    }

    bool COSEMServer::RLRE_Handler(const IAPDUPtr& pAPDU)
    {
        return false;
    }

    // Himanshu - ACCESS
    bool COSEMServer::ACCESS_Request_Handler(const IAPDUPtr& pAPDU)
    {
        AccessRequestEventData * pEvent = nullptr;
        Access_Request *  pRequest = dynamic_cast<Access_Request *>(pAPDU.get());
        GLO::Access_Request *    pGLORequest = dynamic_cast<GLO::Access_Request *>(pAPDU.get());  // Himanshu - GLO
        if (pRequest)
        {
            pEvent = new AccessRequestEventData(APPAccessRequestOrIndication(
                pAPDU->GetSourceAddress(),
                pAPDU->GetDestinationAddress(),
                pRequest->long_invoke_id_and_priority,
                pRequest->date_time,
                pRequest->access_request_list_of_spec,
                pRequest->access_request_list_of_data));
        }
        else if (pGLORequest)   // Himanshu - GLO
        {
            pEvent = new AccessRequestEventData(APPAccessRequestOrIndication(
                pAPDU->GetSourceAddress(),
                pAPDU->GetDestinationAddress(),
                *pGLORequest));
        }
        if (pEvent)
        {
            bool bAllowed = false;
            BEGIN_TRANSITION_MAP
                TRANSITION_MAP_ENTRY(ST_INACTIVE, ST_IGNORED)
                TRANSITION_MAP_ENTRY(ST_IDLE, ST_IGNORED)
                TRANSITION_MAP_ENTRY(ST_ASSOCIATION_PENDING, ST_IGNORED)
                TRANSITION_MAP_ENTRY(ST_ASSOCIATION_RELEASE_PENDING, ST_IGNORED)
                TRANSITION_MAP_ENTRY(ST_ASSOCIATED, ST_ASSOCIATED)
            END_TRANSITION_MAP(bAllowed, pEvent);
            return bAllowed;
        }
        return false;
    }

    bool COSEMServer::ACCESS_Response_Handler(const IAPDUPtr& pAPDU)
    {
        return false;
    }

    // Himanshu - General
    bool COSEMServer::General_Glo_Ciphering_Handler(const IAPDUPtr& pAPDU)
    {
        GLO::General_Glo_Ciphering *  pCiphering = dynamic_cast<GLO::General_Glo_Ciphering *>(pAPDU.get());
        if (pCiphering)
        {
            DLMSVector Plaintext = pCiphering->Decrypt(
                m_Association.GetAssociationContext(pCiphering->GetSourceAddress())->m_SecurityOptions.SecurityContext.GetSecuritySuite()
                , m_Association.GetAssociationContext(pCiphering->GetSourceAddress())->m_SecurityOptions
            );
            if (Plaintext.Size() == 0)
            {
                return false;
            }
            IAPDUPtr pAPDU = APDUFactory().Parse(pCiphering->GetSourceAddress(), pCiphering->GetDestinationAddress(), &Plaintext);
            if (pAPDU)
            {
                switch (pAPDU->GetTag())
                {
                case Access_Request::Tag:
                    return ACCESS_Request_Handler(pAPDU);
                default:
                    throw std::logic_error("General_Glo_Ciphering_Handler Not Implemented!");
                }
            }
            return true;
        }
        return false;
    }

}
