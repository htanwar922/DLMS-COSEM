// ===========================================================================
// Copyright (c) 2018, Electric Power Research Institute (EPRI)
// All rights reserved.
//
// DLMS-COSEM ("this software") is licensed under BSD 3-Clause license.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// *  Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// *  Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// *  Neither the name of EPRI nor the names of its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
// OF SUCH DAMAGE.
//
// This EPRI software incorporates work covered by the following copyright and permission
// notices. You may not use these works except in compliance with their respective
// licenses, which are provided below.
//
// These works are provided by the copyright holders and contributors "as is" and any express or
// implied warranties, including, but not limited to, the implied warranties of merchantability
// and fitness for a particular purpose are disclaimed.
//
// This software relies on the following libraries and licenses:
//
// ###########################################################################
// Boost Software License, Version 1.0
// ###########################################################################
//
// * asio v1.10.8 (https://sourceforge.net/projects/asio/files/)
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//

#pragma once

#include <cstdint>
#include <vector>
#include <list>

#include "ITemplates/IBaseLibrary.h"
#include "COSEM/COSEM.h"
#include "interfaces/ICOSEMInterface.h"
#include "interfaces/IAssociationLN.h"
#include "COSEM/COSEMSecurity.h"

namespace EPRI
{
#define LOGICAL_DEVICE_BEGIN_OBJECTS

#define LOGICAL_DEVICE_OBJECT(OBJ)\
        RegisterObject(&OBJ);

#define LOGICAL_DEVICE_OBJECTS_LIST(OBJListP)\
        for (auto pObj : OBJListP)\
        {\
            RegisterObject(pObj);\
        }

#define LOGICAL_DEVICE_END_OBJECTS

    class COSEMServer;
    struct APPBaseCallbackParameter;
    struct APPOpenRequestOrIndication;
    struct APPOpenConfirmOrResponse;
    struct APPGetRequestOrIndication;
    struct APPSetRequestOrIndication;
    struct APPActionRequestOrIndication;
    struct APPReleaseRequestOrIndication;
    struct APPReleaseConfirmOrResponse;
    struct APPAccessRequestOrIndication;    // Himanshu
    struct APPAccessConfirmOrResponse;      // Himanshu

    struct AssociationContext
    {
        using AssociationStatusType = IAssociationLN::AssociationState;

        AssociationContext(const APPOpenConfirmOrResponse& Response);
        //
        // Partners
        //
        COSEMAddressType        m_ClientSAP;
        COSEMAddressType        m_ServerSAP;
        //
        // Application Context
        //
        COSEMSecurityOptions    m_SecurityOptions;
        //
        // xDLMS Context Information
        //
        xDLMS::Context          m_xDLMS;
        //
        // Status Information
        //
        AssociationStatusType   m_Status;

    };

    class Association : public IAssociationLNObject
    {
    public:
        Association() = delete;
        Association(std::vector<ICOSEMObject *> * pObjects);
        Association(std::vector<ICOSEMObject *> * pObjects
            , const COSEMObjectInstanceID& OID
            , uint16_t ShortNameBase = std::numeric_limits<uint16_t>::max());
        virtual ~Association();

        virtual size_t AvailableAssociations() const;
        virtual bool RegisterAssociation(const APPOpenConfirmOrResponse& Response);
        virtual bool ReleaseAssociation(const APPReleaseConfirmOrResponse& Response);
        virtual const AssociationContext * GetAssociationContext(
            const APPBaseCallbackParameter& Parameter);
        COSEMAddressType GetAssociatedAddress() const;
        virtual void ReleaseTransientAssociations();

    protected:
        using AssociationInfoList = std::list<AssociationContext>;
        virtual APDUConstants::Data_Access_Result InternalGet(const AssociationContext& Context,
            ICOSEMAttribute * pAttribute,
            const Cosem_Attribute_Descriptor& Descriptor,
            SelectiveAccess * pSelectiveAccess) final;
        AssociationContext * GetAssociationContextByIndex(int Index);
        AssociationContext * GetAssociationContextByAddress(COSEMAddressType Address);

        AssociationInfoList m_Associations;
        std::vector<ICOSEMObject *> * m_pObjects;
    };

    class LogicalDevice
    {
    public:
        LogicalDevice() = delete;
        LogicalDevice(COSEMServer * pServer);
        virtual ~LogicalDevice();

        virtual bool InitiateOpen(const APPOpenRequestOrIndication& Request, bool UpperLayerAllowed);
        virtual bool InitiateGet(const APPGetRequestOrIndication& Request, bool UpperLayerAllowed);
        virtual bool InitiateSet(const APPSetRequestOrIndication& Request, bool UpperLayerAllowed);
        virtual bool InitiateAction(const APPActionRequestOrIndication& Request, bool UpperLayerAllowed);
        virtual bool InitiateRelease(const APPReleaseRequestOrIndication& Request, bool UpperLayerAllowed);
        virtual COSEMAddressType SAP() const;
        virtual COSEMAddressType GetAssociatedAddress() const;

        // Himanshu - ACCESS
        virtual bool InitiateAccess(const APPAccessRequestOrIndication& Request, bool UpperLayerAllowed);

    protected:
        virtual void RegisterObject(ICOSEMObject * pObject);
        virtual ssize_t FindObject(const Cosem_Attribute_Descriptor& Descriptor) const;
        virtual ssize_t FindObject(const Cosem_Method_Descriptor& Descriptor) const;
        virtual bool IsForMe(const APPBaseCallbackParameter& Parameter) const;
        virtual void ReleaseTransientAssociations();

        std::vector<ICOSEMObject *>  m_Objects;
        Association                  m_Association;
        COSEMServer *                m_pServer = nullptr;

    };
}
