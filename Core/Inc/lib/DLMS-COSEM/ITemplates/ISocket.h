// ===========================================================================
// Copyright (c) 2018, Electric Power Research Institute (EPRI)
// All rights reserved.
//
// DLMS-COSEM ("this software") is licensed under BSD 3-Clause license.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// *  Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// *  Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// *  Neither the name of EPRI nor the names of its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
// OF SUCH DAMAGE.
//
// This EPRI software incorporates work covered by the following copyright and permission
// notices. You may not use these works except in compliance with their respective
// licenses, which are provided below.
//
// These works are provided by the copyright holders and contributors "as is" and any express or
// implied warranties, including, but not limited to, the implied warranties of merchantability
// and fitness for a particular purpose are disclaimed.
//
// This software relies on the following libraries and licenses:
//
// ###########################################################################
// Boost Software License, Version 1.0
// ###########################################################################
//
// * asio v1.10.8 (https://sourceforge.net/projects/asio/files/)
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
// 

#pragma once

#include <cstdint>
#include <cstddef>
#include <functional>

#include "ERROR_TYPE.h"
#include "Callback.h"
#include "DLMSValue.h"

namespace EPRI
{
    class ISocket;
    
    class IIP
    {
    public:
        virtual ~IIP()
        {
        }
        
        typedef struct _Options
        {
            enum SocketMode : uint8_t
            {
                MODE_SERVER,
                MODE_CLIENT
            }                   m_Mode = MODE_SERVER;
            enum IPVersion : uint8_t
            {
                VERSION4 = 4,
                VERSION6 = 6
            }                   m_IPVersion = VERSION4;
            enum Protocol : uint8_t
            {
                TCP,
                UDP
            }                   m_Protocol = TCP;
            bool                m_ReuseAddress = true;
            
            _Options(SocketMode Mode = MODE_SERVER,
                IPVersion Version = VERSION4, 
                Protocol Prot = TCP,
                bool ReuseAddress = true) : 
                m_Mode(Mode), 
                m_IPVersion(Version), 
                m_Protocol(Prot),
                m_ReuseAddress(ReuseAddress)
            {
            }
            
        } Options;

        virtual ISocket * CreateSocket(const Options& Opt) = 0;
        virtual void ReleaseSocket(ISocket * pSocket) = 0;
        virtual bool Process() = 0;
        
    };
    
    class ISocket
    {
    public:
        static const int DEFAULT_DLMS_PORT = 4059;
        
        enum SocketError : uint16_t
        {
            E_SUCCESS
        };
        
        virtual ~ISocket()
        {
        }
        
        typedef std::function<void(ERROR_TYPE)>         ConnectCallbackFunction;
        typedef std::function<void(ERROR_TYPE, size_t)> WriteCallbackFunction;
        typedef std::function<void(ERROR_TYPE, size_t)> ReadCallbackFunction;
        typedef std::function<void(ERROR_TYPE)>         CloseCallbackFunction;

        virtual ERROR_TYPE Open(const char * DestinationAddress = nullptr, int Port = DEFAULT_DLMS_PORT) = 0;
        virtual ConnectCallbackFunction RegisterConnectHandler(ConnectCallbackFunction Callback) = 0;
        virtual ERROR_TYPE Write(const DLMSVector& Data, bool Asynchronous = false) = 0;
        virtual WriteCallbackFunction RegisterWriteHandler(WriteCallbackFunction Callback) = 0;
        virtual ERROR_TYPE Read(DLMSVector * pData, size_t ReadAtLeast = 0,
                                uint32_t TimeOutInMS = 0, size_t * pActualBytes = nullptr) = 0;
        virtual bool AppendAsyncReadResult(DLMSVector * pData, size_t ReadAtLeast = 0) = 0;
        virtual ReadCallbackFunction RegisterReadHandler(ReadCallbackFunction Callback) = 0;
        virtual ERROR_TYPE Close() = 0;
        virtual CloseCallbackFunction RegisterCloseHandler(CloseCallbackFunction Callback) = 0;
        virtual bool IsConnected() = 0;
        virtual ERROR_TYPE Accept(const char * DestinationAddress = nullptr, int Port = DEFAULT_DLMS_PORT) = 0;    // Himanshu

        IIP::Options                    m_Options;
    };
    
}
