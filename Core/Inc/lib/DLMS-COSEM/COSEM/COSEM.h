// ===========================================================================
// Copyright (c) 2018, Electric Power Research Institute (EPRI)
// All rights reserved.
//
// DLMS-COSEM ("this software") is licensed under BSD 3-Clause license.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// *  Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// *  Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// *  Neither the name of EPRI nor the names of its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
// OF SUCH DAMAGE.
//
// This EPRI software incorporates work covered by the following copyright and permission
// notices. You may not use these works except in compliance with their respective
// licenses, which are provided below.
//
// These works are provided by the copyright holders and contributors "as is" and any express or
// implied warranties, including, but not limited to, the implied warranties of merchantability
// and fitness for a particular purpose are disclaimed.
//
// This software relies on the following libraries and licenses:
//
// ###########################################################################
// Boost Software License, Version 1.0
// ###########################################################################
//
// * asio v1.10.8 (https://sourceforge.net/projects/asio/files/)
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//

#pragma once

#include <functional>
#include <map>
#include <memory>

#include "interfaces/COSEMAttribute.h"
#include "Callback.h"
#include "wrapper/Transport.h"
#include "Device/StateMachine.h"
#include "APDU/APDUDefs.h"
#include "Device/LogicalDevice.h"
#include "COSEM/COSEMSecurity.h"

namespace EPRI
{
    class IAPDU;

    enum COSEMRunResult : uint16_t
    {
        COSEM_RUN_WAIT
    };

    template<typename TInternal>
        class COSEMEventData : public EventData
        {
        public:
            COSEMEventData(const TInternal& D)
                : Data(D)
            {
            }

            virtual void Release()
            {
                delete this;
            }

            TInternal Data;

        };

    using TransportEventData = COSEMEventData<Transport::TransportEvent>;
    //
    // BaseCallbackParameter for COSEM
    //
    struct APPBaseCallbackParameter : public BaseCallbackParameter
    {
        APPBaseCallbackParameter(COSEMAddressType SourceAddress,
            COSEMAddressType DestinationAddress)
            : m_SourceAddress(SourceAddress)
            , m_DestinationAddress(DestinationAddress)
        {
        }
        COSEMAddressType  m_SourceAddress;
        COSEMAddressType  m_DestinationAddress;
    };
    //
    // ABORT Service
    //
    struct APPAbortIndication : public APPBaseCallbackParameter
    {
        static const uint16_t ID = 0x2000;

        APPAbortIndication(COSEMAddressType SourceAddress,
            COSEMAddressType DestinationAddress,
            uint32_t Diagnostic = 0)
            : APPBaseCallbackParameter(SourceAddress, DestinationAddress)
            , m_Diagnostic(Diagnostic)
        {
        }
        //
        // TODO - Make useful.  Phase II.
        //
        uint32_t      m_Diagnostic;

    };

    using AbortIndicationEventData = COSEMEventData<APPAbortIndication>;

    class COSEM : public Callback<bool, uint16_t>, public StateMachine
    {
    public:
        typedef int TRANSPORT_HANDLE;

        COSEM() = delete;
        COSEM(COSEMAddressType Address);
        virtual ~COSEM();

        virtual COSEMRunResult Process() = 0;
        virtual TRANSPORT_HANDLE RegisterTransport(Transport * pTransport);
        virtual bool IsOpen() const;
        virtual COSEMAddressType GetAddress() const;
        //
        // COSEM-ABORT Service
        //
        void RegisterAbortIndication(CallbackFunction Callback);

    protected:
        //
        // State Machine
        //
        enum States : uint8_t
        {
            ST_INACTIVE = 0,
            ST_IDLE,
            ST_ASSOCIATION_PENDING,
            ST_ASSOCIATION_RELEASE_PENDING,
            ST_ASSOCIATED,
            ST_MAX_STATES,
            ST_IGNORED = StateMachine::EVENT_IGNORED
        };

        virtual size_t MaxTransports();
        virtual bool TransportEventHandler(const Transport::TransportEvent& Event);

        virtual void ST_Inactive_Handler(EventData * pData) = 0;
        virtual void ST_Idle_Handler(EventData * pData) = 0;
        virtual void ST_Association_Pending_Handler(EventData * pData) = 0;
        virtual void ST_Association_Release_Pending_Handler(EventData * pData) = 0;
        virtual void ST_Associated_Handler(EventData * pData) = 0;
        //
        // APDU Handlers
        //
        virtual bool AARQ_Handler(const IAPDUPtr& pAPDU) = 0;
        virtual bool AARE_Handler(const IAPDUPtr& pAPDU) = 0;
        virtual bool GET_Request_Handler(const IAPDUPtr& pAPDU) = 0;
        virtual bool GET_Response_Handler(const IAPDUPtr& pAPDU) = 0;
        virtual bool SET_Request_Handler(const IAPDUPtr& pAPDU) = 0;
        virtual bool SET_Response_Handler(const IAPDUPtr& pAPDU) = 0;
        virtual bool ACTION_Request_Handler(const IAPDUPtr& pAPDU) = 0;
        virtual bool ACTION_Response_Handler(const IAPDUPtr& pAPDU) = 0;
        virtual bool RLRQ_Handler(const IAPDUPtr& pAPDU) = 0;
        virtual bool RLRE_Handler(const IAPDUPtr& pAPDU) = 0;

        // Himanshu - ACCESS
        virtual bool ACCESS_Request_Handler(const IAPDUPtr& pAPDU) = 0;
        virtual bool ACCESS_Response_Handler(const IAPDUPtr& pAPDU) = 0;
        //
        // Helpers
        //
        virtual Transport * GetTransport() const;

        std::map<TRANSPORT_HANDLE, Transport *> m_Transports;
        COSEMAddressType                        m_Address;

    };
    //
    // OPEN Service
    //
    struct APPOpenConfirmOrResponse : public APPBaseCallbackParameter
    {
        static const uint16_t ID = 0x2001;
        using AssociationResultType = AARE::AssociationResult;
        using DiagnosticSourceType = AARE::AssociateDiagnosticChoice;
        using BaseDiagnosticType = int8_t;
        using UserDiagnosticType = AARE::AssociateDiagnosticUser;
        using ProviderDiagnosticType = AARE::AssociateDiagnosticProvider;
        using ApplicationContextType = DLMSOptional<ASNObjectIdentifier>;

        APPOpenConfirmOrResponse(COSEMAddressType SourceAddress,
                                 COSEMAddressType DestinationAddress,
                                 const xDLMS::InitiateResponseVariant& xDLMS,
                                 const COSEMSecurityOptions& Security,
                                 AssociationResultType Result,
                                 DiagnosticSourceType DiagnosticSource,
                                 BaseDiagnosticType Diagnostic)
            :
            APPBaseCallbackParameter(SourceAddress, DestinationAddress),
            m_Result(Result), m_SecurityOptions(Security),
            m_DiagnosticSource(DiagnosticSource), m_Diagnostic(Diagnostic),
            m_xDLMS(xDLMS)
        {
        }
        APPOpenConfirmOrResponse(AARE * pAARE);
        bool ToAPDU(AARE * pAARE);

        AssociationResultType   m_Result;

        //
        // Mechanism and Security
        //
        COSEMSecurityOptions m_SecurityOptions;

        DiagnosticSourceType    m_DiagnosticSource;
        BaseDiagnosticType      m_Diagnostic;
        xDLMS::InitiateResponseVariant m_xDLMS;

    };

    struct APPOpenRequestOrIndication : public APPBaseCallbackParameter
    {
        static const uint16_t ID = 0x2002;
        APPOpenRequestOrIndication(COSEMAddressType SourceAddress,
                                   COSEMAddressType DestinationAddress,
                                   const xDLMS::InitiateRequestVariant& xDLMS,
                                   const COSEMSecurityOptions& Security) :
            APPBaseCallbackParameter(SourceAddress, DestinationAddress),
            m_xDLMS(xDLMS),
            m_SecurityOptions(Security)
        {
        }
        APPOpenRequestOrIndication(AARQ * pAARQ);
        bool ToAPDU(AARQ * pAARQ);
        //
        // Application Context Name Building
        //
        xDLMS::InitiateRequestVariant  m_xDLMS;
        //
        // Mechanism and Security
        //
        COSEMSecurityOptions    m_SecurityOptions;
    };

    using OpenRequestEventData = COSEMEventData<APPOpenRequestOrIndication>;
    using OpenResponseEventData = COSEMEventData<APPOpenConfirmOrResponse>;
    //
    // GET Service
    //
    struct APPGetRequestOrIndication : public APPBaseCallbackParameter
    {
        static const uint16_t ID = 0x2003;
        typedef variant<Cosem_Attribute_Descriptor, uint32_t> RequestParameter;
        using GetRequestType = Get_Request::Get_Request_Choice;

        APPGetRequestOrIndication(COSEMAddressType SourceAddress,
                                  COSEMAddressType DestinationAddress,
                                  InvokeIdAndPriorityType InvokeID,
                                  COSEMPriority Priority,
                                  COSEMServiceClass ServiceClass,
                                  const Cosem_Attribute_Descriptor& AttributeDescriptor) :
            APPBaseCallbackParameter(SourceAddress, DestinationAddress),
            m_Type(GetRequestType::get_request_normal),
            m_InvokeIDAndPriority(InvokeID | Priority | ServiceClass)
        {
            m_Parameter = AttributeDescriptor;
        }
        APPGetRequestOrIndication(COSEMAddressType SourceAddress,
                                  COSEMAddressType DestinationAddress,
                                  InvokeIdAndPriorityType InvokeIDAndPriority,
                                  const Cosem_Attribute_Descriptor& AttributeDescriptor) :
            APPBaseCallbackParameter(SourceAddress, DestinationAddress),
            m_Type(GetRequestType::get_request_normal),
            m_InvokeIDAndPriority(InvokeIDAndPriority)
        {
            m_Parameter = AttributeDescriptor;
        }
        APPGetRequestOrIndication(COSEMAddressType SourceAddress,
                                  COSEMAddressType DestinationAddress,
                                  InvokeIdAndPriorityType InvokeID,
                                  uint32_t BlockNumber) :
            APPBaseCallbackParameter(SourceAddress, DestinationAddress),
            m_Type(GetRequestType::get_request_next),
            m_InvokeIDAndPriority(InvokeID)
        {
            m_Parameter = BlockNumber;
        }
        // Himanshu - GLO
        APPGetRequestOrIndication(COSEMAddressType SourceAddress,
            COSEMAddressType DestinationAddress,
            GLO::Get_Request& Request)
            : APPBaseCallbackParameter(SourceAddress, DestinationAddress)
            , m_Type((GetRequestType)0)
            , m_InvokeIDAndPriority(0)
            , m_pGloRequest(std::make_unique<GLO::Get_Request>(GLO::Get_Request(Request)))
        {
        }
        // Himanshu - GLO - required by the unique_ptr
        APPGetRequestOrIndication(const APPGetRequestOrIndication& Request)
            : APPBaseCallbackParameter(Request.m_SourceAddress, Request.m_DestinationAddress)
            , m_Type(Request.m_Type)
            , m_InvokeIDAndPriority(Request.m_InvokeIDAndPriority)
            , m_Parameter(Request.m_Parameter)
            //, m_pGloRequest(Request.m_pGloRequest ? std::make_unique<GLO::Get_Request>(Request.m_pGloRequest) : nullptr)
        {
            if (Request.m_pGloRequest)
                m_pGloRequest = std::make_unique<GLO::Get_Request>(*Request.m_pGloRequest);
        }

        GetRequestType                 m_Type;
        InvokeIdAndPriorityType        m_InvokeIDAndPriority;
        RequestParameter               m_Parameter;
        std::unique_ptr<GLO::Get_Request>   m_pGloRequest = nullptr;        // Himanshu - GLO
    };

    struct APPGetConfirmOrResponse : public APPBaseCallbackParameter
    {
        static const uint16_t ID = 0x2004;
        using GetResponseType = Get_Response::Get_Response_Choice;

        APPGetConfirmOrResponse(COSEMAddressType SourceAddress,
                                COSEMAddressType DestinationAddress,
                                InvokeIdAndPriorityType InvokeID,
                                const Get_Data_Result& Result) :
            APPBaseCallbackParameter(SourceAddress, DestinationAddress),
            m_Type(GetResponseType::get_response_normal),
            m_InvokeIDAndPriority(InvokeID),
            m_Result(Result)
        {
        }
        // Himanshu - GLO
        APPGetConfirmOrResponse(COSEMAddressType SourceAddress,
            COSEMAddressType DestinationAddress,
            InvokeIdAndPriorityType InvokeID,
            GLO::Get_Response& Response) :
            APPBaseCallbackParameter(SourceAddress, DestinationAddress),
            m_Type((GetResponseType)0),
            m_InvokeIDAndPriority(InvokeID),
            m_pGloResponse(std::make_unique<GLO::Get_Response>(GLO::Get_Response(Response)))
        {
        }
        // Himanshu - GLO - required by the unique_ptr
        APPGetConfirmOrResponse(const APPGetConfirmOrResponse& Response)
            : APPBaseCallbackParameter(Response.m_SourceAddress, Response.m_DestinationAddress)
            , m_Type(Response.m_Type)
            , m_InvokeIDAndPriority(Response.m_InvokeIDAndPriority)
            , m_Result(Response.m_Result)
            //, m_pGloResponse(Response.m_pGloResponse ? std::make_unique<GLO::Get_Response>(*Response.m_pGloResponse) : nullptr)
        {
            if (Response.m_pGloResponse)
                m_pGloResponse = std::make_unique<GLO::Get_Response>(*Response.m_pGloResponse);
        }

        GetResponseType         m_Type;
        InvokeIdAndPriorityType m_InvokeIDAndPriority;
        Get_Data_Result         m_Result;
        std::unique_ptr<GLO::Get_Response> m_pGloResponse = nullptr;        // Himanshu - GLO
    };

    using GetRequestEventData = COSEMEventData<APPGetRequestOrIndication>;
    using GetResponseEventData = COSEMEventData<APPGetConfirmOrResponse>;
    //
    // SET Service
    //
    struct APPSetRequestOrIndication : public APPBaseCallbackParameter
    {
        static const uint16_t ID = 0x2005;
        typedef variant<Cosem_Attribute_Descriptor, uint32_t> RequestParameter;
        using SetRequestType = Set_Request::Set_Request_Choice;

        APPSetRequestOrIndication(COSEMAddressType SourceAddress,
                COSEMAddressType DestinationAddress,
                InvokeIdAndPriorityType InvokeID,
                COSEMPriority Priority,
                COSEMServiceClass ServiceClass,
                const Cosem_Attribute_Descriptor& AttributeDescriptor,
                const DLMSVector& Value) :
            APPBaseCallbackParameter(SourceAddress, DestinationAddress),
            m_Type(SetRequestType::set_request_normal),
            m_InvokeIDAndPriority(InvokeID | Priority | ServiceClass),
            m_Value(Value)
        {
            m_Parameter = AttributeDescriptor;
        }
        APPSetRequestOrIndication(COSEMAddressType SourceAddress,
                COSEMAddressType DestinationAddress,
                InvokeIdAndPriorityType InvokeIDAndPriority,
                const Cosem_Attribute_Descriptor& AttributeDescriptor,
                const DLMSVector& Value) :
            APPBaseCallbackParameter(SourceAddress, DestinationAddress),
            m_Type(SetRequestType::set_request_normal),
            m_InvokeIDAndPriority(InvokeIDAndPriority),
            m_Value(Value)
        {
            m_Parameter = AttributeDescriptor;
        }
        // Himanshu - GLO
        APPSetRequestOrIndication(COSEMAddressType SourceAddress,
            COSEMAddressType DestinationAddress,
            GLO::Set_Request& Request)
            : APPBaseCallbackParameter(SourceAddress, DestinationAddress)
            , m_Type((SetRequestType)0)
            , m_InvokeIDAndPriority(0)
            , m_Value()
            , m_pGloRequest(std::make_unique<GLO::Set_Request>(GLO::Set_Request(Request)))
        {
        }
        // Himanshu - GLO - required by the unique_ptr
        APPSetRequestOrIndication(const APPSetRequestOrIndication& Request)
            : APPBaseCallbackParameter(Request.m_SourceAddress, Request.m_DestinationAddress)
            , m_Type(Request.m_Type)
            , m_InvokeIDAndPriority(Request.m_InvokeIDAndPriority)
            , m_Parameter(Request.m_Parameter)
            , m_Value(Request.m_Value)
            //, m_pGloRequest(Request.m_pGloRequest ? std::make_unique<GLO::Set_Request>(Request.m_pGloRequest) : nullptr)
        {
            if (Request.m_pGloRequest)
                m_pGloRequest = std::make_unique<GLO::Set_Request>(*Request.m_pGloRequest);
        }

        SetRequestType                 m_Type;
        InvokeIdAndPriorityType        m_InvokeIDAndPriority;
        RequestParameter               m_Parameter;
        DLMSVector                     m_Value;
        std::unique_ptr<GLO::Set_Request> m_pGloRequest = nullptr;        // Himanshu - GLO
    };

    struct APPSetConfirmOrResponse : public APPBaseCallbackParameter
    {
        static const uint16_t ID = 0x2006;
        using SetResponseType = Set_Response::Set_Response_Choice;

        APPSetConfirmOrResponse(COSEMAddressType SourceAddress,
                COSEMAddressType DestinationAddress,
                InvokeIdAndPriorityType InvokeID,
                APDUConstants::Data_Access_Result Result) :
            APPBaseCallbackParameter(SourceAddress, DestinationAddress),
            m_Type(SetResponseType::set_response_normal),
            m_InvokeIDAndPriority(InvokeID), m_Result(Result)
        {
        }
        // Himanshu - GLO
        APPSetConfirmOrResponse(COSEMAddressType SourceAddress,
            COSEMAddressType DestinationAddress,
            InvokeIdAndPriorityType InvokeID,
            GLO::Set_Response& Response) :
            APPBaseCallbackParameter(SourceAddress, DestinationAddress),
            m_Type((SetResponseType)0),
            m_InvokeIDAndPriority(InvokeID),
            m_pGloResponse(std::make_unique<GLO::Set_Response>(GLO::Set_Response(Response)))
        {
        }
        // Himanshu - GLO - required by the unique_ptr
        APPSetConfirmOrResponse(const APPSetConfirmOrResponse& Response)
            : APPBaseCallbackParameter(Response.m_SourceAddress, Response.m_DestinationAddress)
            , m_Type(Response.m_Type)
            , m_InvokeIDAndPriority(Response.m_InvokeIDAndPriority)
            , m_Result(Response.m_Result)
            //, m_pGloResponse(Response.m_pGloResponse ? std::make_unique<GLO::Set_Response>(GLO::Set_Response(*Response.m_pGloResponse)) : nullptr)
        {
            if (Response.m_pGloResponse)
                m_pGloResponse = std::make_unique<GLO::Set_Response>(*Response.m_pGloResponse);
        }

        SetResponseType                   m_Type;
        InvokeIdAndPriorityType           m_InvokeIDAndPriority;
        APDUConstants::Data_Access_Result m_Result;
        std::unique_ptr<GLO::Set_Response> m_pGloResponse = nullptr;        // Himanshu - GLO
    };

    using SetRequestEventData = COSEMEventData<APPSetRequestOrIndication>;
    using SetResponseEventData = COSEMEventData<APPSetConfirmOrResponse>;
    //
    // ACTION Service
    //
    struct APPActionRequestOrIndication : public APPBaseCallbackParameter
    {
        static const uint16_t ID = 0x2007;
        typedef variant<Cosem_Method_Descriptor, uint32_t> RequestParameter;
        using ActionRequestType = Action_Request::Action_Request_Choice;

        APPActionRequestOrIndication(COSEMAddressType SourceAddress,
            COSEMAddressType DestinationAddress,
            InvokeIdAndPriorityType InvokeID,
            COSEMPriority Priority,
            COSEMServiceClass ServiceClass,
            const Cosem_Method_Descriptor& MethodDescriptor,
            const DLMSOptional<DLMSVector>& ActionParams) :
            APPBaseCallbackParameter(SourceAddress, DestinationAddress),
            m_Type(ActionRequestType::action_request_normal),
            m_InvokeIDAndPriority(InvokeID | Priority | ServiceClass),
            m_ActionParameters(ActionParams)
        {
            m_Parameter = MethodDescriptor;
        }
        APPActionRequestOrIndication(COSEMAddressType SourceAddress,
            COSEMAddressType DestinationAddress,
            InvokeIdAndPriorityType InvokeIDAndPriority,
            const Cosem_Method_Descriptor& MethodDescriptor,
            const DLMSOptional<DLMSVector>& ActionParams) :
            APPBaseCallbackParameter(SourceAddress, DestinationAddress),
            m_Type(ActionRequestType::action_request_normal),
            m_InvokeIDAndPriority(InvokeIDAndPriority),
            m_ActionParameters(ActionParams)
        {
            m_Parameter = MethodDescriptor;
        }
        // Himanshu - GLO
        APPActionRequestOrIndication(COSEMAddressType SourceAddress,
            COSEMAddressType DestinationAddress,
            GLO::Action_Request& Request)
            : APPBaseCallbackParameter(SourceAddress, DestinationAddress)
            , m_Type((ActionRequestType)0)
            , m_InvokeIDAndPriority(0)
            , m_Parameter()
            , m_ActionParameters()
            , m_pGloRequest(std::make_unique<GLO::Action_Request>(GLO::Action_Request(Request)))
        {
        }
        // Himanshu - GLO - required by the unique_ptr
        APPActionRequestOrIndication(const APPActionRequestOrIndication& Request)
            : APPBaseCallbackParameter(Request.m_SourceAddress, Request.m_DestinationAddress)
            , m_Type(Request.m_Type)
            , m_InvokeIDAndPriority(Request.m_InvokeIDAndPriority)
            , m_Parameter(Request.m_Parameter)
            , m_ActionParameters(Request.m_ActionParameters)
            //, m_pGloRequest(Request.m_pGloRequest ? std::make_unique<GLO::Action_Request>(Request.m_pGloRequest) : nullptr)
        {
            if (Request.m_pGloRequest)
                m_pGloRequest = std::make_unique<GLO::Action_Request>(*Request.m_pGloRequest);
        }

        ActionRequestType              m_Type;
        InvokeIdAndPriorityType        m_InvokeIDAndPriority;
        RequestParameter               m_Parameter;
        DLMSOptional<DLMSVector>       m_ActionParameters;
        std::unique_ptr<GLO::Action_Request> m_pGloRequest = nullptr;        // Himanshu - GLO
    };

    struct APPActionConfirmOrResponse : public APPBaseCallbackParameter
    {
        static const uint16_t ID = 0x2008;
        using ActionResponseType = Action_Response::Action_Response_Choice;

        APPActionConfirmOrResponse(COSEMAddressType SourceAddress,
            COSEMAddressType DestinationAddress,
            InvokeIdAndPriorityType InvokeID,
            APDUConstants::Action_Result Result) :
            APPBaseCallbackParameter(SourceAddress, DestinationAddress),
            m_Type(ActionResponseType::action_response_normal),
            m_InvokeIDAndPriority(InvokeID),
            m_Result(Result)
        {
        }
        // Himanshu - GLO
        APPActionConfirmOrResponse(COSEMAddressType SourceAddress,
            COSEMAddressType DestinationAddress,
            InvokeIdAndPriorityType InvokeID,
            GLO::Action_Response& Response) :
            APPBaseCallbackParameter(SourceAddress, DestinationAddress),
            m_Type((ActionResponseType)0),
            m_InvokeIDAndPriority(InvokeID),
            m_pGloResponse(std::make_unique<GLO::Action_Response>(GLO::Action_Response(Response)))
        {
        }
        // Himanshu - GLO - required by the unique_ptr
        APPActionConfirmOrResponse(const APPActionConfirmOrResponse& Response)
            : APPBaseCallbackParameter(Response.m_SourceAddress, Response.m_DestinationAddress)
            , m_Type(Response.m_Type)
            , m_InvokeIDAndPriority(Response.m_InvokeIDAndPriority)
            , m_Result(Response.m_Result)
            //, m_pGloResponse(Response.m_pGloResponse ? std::make_unique<GLO::Action_Response>(GLO::Action_Response(*Response.m_pGloResponse)) : nullptr)
        {
            if (Response.m_pGloResponse)
                m_pGloResponse = std::make_unique<GLO::Action_Response>(*Response.m_pGloResponse);
        }

        ActionResponseType                m_Type;
        InvokeIdAndPriorityType           m_InvokeIDAndPriority;
        APDUConstants::Action_Result      m_Result;
        std::unique_ptr<GLO::Action_Response> m_pGloResponse = nullptr;        // Himanshu - GLO
    };

    using ActionRequestEventData = COSEMEventData<APPActionRequestOrIndication>;
    using ActionResponseEventData = COSEMEventData<APPActionConfirmOrResponse>;
    //
    // RELEASE Service
    //
    struct APPReleaseConfirmOrResponse : public APPBaseCallbackParameter
    {
        static const uint16_t ID = 0x2009;
        using ReleaseReason = RLRE::ReleaseResponseReason;
        using ReasonType = DLMSOptional<ReleaseReason>;

        APPReleaseConfirmOrResponse(COSEMAddressType SourceAddress,
            COSEMAddressType DestinationAddress,
            const xDLMS::InitiateResponseVariant& xDLMS,
            bool UseRLRQRLRE = true,
            const ReasonType& Reason = DLMSOptionalNone) :
            APPBaseCallbackParameter(SourceAddress, DestinationAddress),
            m_UseRLRQRLRE(UseRLRQRLRE),
            m_Reason(Reason),
            m_xDLMS(xDLMS)
        {
        }
        APPReleaseConfirmOrResponse(RLRE * pRLRE);
        bool ToAPDU(RLRE * pRLRE);

        bool                     m_UseRLRQRLRE;
        ReasonType               m_Reason;
        xDLMS::InitiateResponseVariant  m_xDLMS;
    };

    struct APPReleaseRequestOrIndication : public APPBaseCallbackParameter
    {
        static const uint16_t ID = 0x200A;
        using ReleaseReason = RLRQ::ReleaseRequestReason;
        using ReasonType = DLMSOptional<ReleaseReason>;

        APPReleaseRequestOrIndication(COSEMAddressType SourceAddress,
            COSEMAddressType DestinationAddress,
            const xDLMS::InitiateRequestVariant& xDLMS,
            bool UseRLRQRLRE = true,
            const ReasonType& Reason = DLMSOptionalNone) :
            APPBaseCallbackParameter(SourceAddress, DestinationAddress),
            m_UseRLRQRLRE(UseRLRQRLRE),
            m_Reason(Reason),
            m_xDLMS(xDLMS)
        {
        }
        APPReleaseRequestOrIndication(RLRQ * pRLRQ);
        bool ToAPDU(RLRQ * pRLRQ);

        bool                    m_UseRLRQRLRE;
        ReasonType              m_Reason;
        xDLMS::InitiateRequestVariant  m_xDLMS;
    };

    using ReleaseRequestEventData = COSEMEventData<APPReleaseRequestOrIndication>;
    using ReleaseResponseEventData = COSEMEventData<APPReleaseConfirmOrResponse>;
    //
    // ACCESS Service - Himanshu - ACCESS
    //
    struct APPAccessRequestOrIndication : public APPBaseCallbackParameter
    {
        static const uint16_t ID = 0x2009;
        using AccessRequestType = Access_Request::Access_Request_Choice;
        using AccessRequestSpecs = Access_Request::AccessRequestListOfSpec;
        using AccessRequestDatas = Access_Request::AccessRequestListOfData;

        APPAccessRequestOrIndication(COSEMAddressType SourceAddress,
            COSEMAddressType DestinationAddress,
            LongInvokeIdAndPriorityType LongInvokeID,
            COSEMPriority Priority,
            COSEMServiceClass ServiceClass,
            COSEMDateTime DateTime,
            const AccessRequestSpecs& AccessSpecs,
            const AccessRequestDatas& AccessDatas) :
            APPBaseCallbackParameter(SourceAddress, DestinationAddress),
            m_LongInvokeIDAndPriority((Priority | ServiceClass) << 24 | LongInvokeID),
            m_DateTime(DateTime),
            m_AccessParameters(AccessSpecs),
            m_AccessDatas(AccessDatas)
        {
        }

        APPAccessRequestOrIndication(COSEMAddressType SourceAddress,
            COSEMAddressType DestinationAddress,
            LongInvokeIdAndPriorityType LongInvokeIDAndPriority,
            COSEMDateTime DateTime,
            const AccessRequestSpecs& AccessSpecs,
            const AccessRequestDatas& AccessDatas) :
            APPBaseCallbackParameter(SourceAddress, DestinationAddress),
            m_LongInvokeIDAndPriority(LongInvokeIDAndPriority),
            m_DateTime(DateTime),
            m_AccessParameters(AccessSpecs),
            m_AccessDatas(AccessDatas)
        {
        }

        // Himanshu - GLO
        APPAccessRequestOrIndication(COSEMAddressType SourceAddress,
            COSEMAddressType DestinationAddress,
            GLO::Access_Request& Request)
            : APPBaseCallbackParameter(SourceAddress, DestinationAddress)
            , m_LongInvokeIDAndPriority(0)
            , m_DateTime(0)
            , m_AccessParameters()
            , m_AccessDatas()
            , m_pGloRequest(std::make_unique<GLO::Access_Request>(GLO::Access_Request(Request)))
        {
        }
        // Himanshu - GLO - required by the unique_ptr
        APPAccessRequestOrIndication(const APPAccessRequestOrIndication& Request)
            : APPBaseCallbackParameter(Request.m_SourceAddress, Request.m_DestinationAddress)
            , m_LongInvokeIDAndPriority(Request.m_LongInvokeIDAndPriority)
            , m_DateTime(Request.m_DateTime)
            , m_AccessParameters(Request.m_AccessParameters)
            , m_AccessDatas(Request.m_AccessDatas)
            //, m_pGloRequest(Request.m_pGloRequest ? std::make_unique<GLO::Access_Request>(Request.m_pGloRequest) : nullptr)
        {
            if (Request.m_pGloRequest)
                m_pGloRequest = std::make_unique<GLO::Access_Request>(*Request.m_pGloRequest);
        }

        LongInvokeIdAndPriorityType m_LongInvokeIDAndPriority;
        COSEMDateTime               m_DateTime;
        AccessRequestSpecs          m_AccessParameters;
        AccessRequestDatas          m_AccessDatas;
        std::unique_ptr<GLO::Access_Request> m_pGloRequest = nullptr;          // Himanshu - GLO
    };

    struct APPAccessConfirmOrResponse : public APPBaseCallbackParameter
    {
        static const uint16_t ID = 0x200a;
        using AccessResponseType = Access_Response::Access_Response_Choice;
        using AccessResponseSpecs = std::vector<Access_Response::AccessResponseSpecification>;
        using AccessResponseDatas = Access_Response::AccessResponseListOfData;

        APPAccessConfirmOrResponse(COSEMAddressType SourceAddress,
            COSEMAddressType DestinationAddress,
            LongInvokeIdAndPriorityType LongInvokeIDAndPriority,
            COSEMDateTime DateTime,
            const AccessResponseSpecs& AccessSpecs,
            const AccessResponseDatas& AccessDatas,
            APPAccessRequestOrIndication::AccessRequestSpecs * AccessRequestSpecs = nullptr
            ) :
            APPBaseCallbackParameter(SourceAddress, DestinationAddress),
            m_LongInvokeIDAndPriority(LongInvokeIDAndPriority),
            m_DateTime(DateTime),
            m_AccessResults(AccessSpecs),
            m_AccessDatas(AccessDatas),
            m_pAccessRequestSpecs(AccessRequestSpecs)
        {
        }
        // Himanshu - GLO
        APPAccessConfirmOrResponse(COSEMAddressType SourceAddress,
            COSEMAddressType DestinationAddress,
            GLO::Access_Response& Response) :
            APPBaseCallbackParameter(SourceAddress, DestinationAddress),
            m_LongInvokeIDAndPriority(0),
            m_DateTime(0),
            m_AccessResults(),
            m_AccessDatas(),
            m_pGloResponse(std::make_unique<GLO::Access_Response>(GLO::Access_Response(Response)))
        {
        }
        // Himanshu - GLO - required by the unique_ptr
        APPAccessConfirmOrResponse(const APPAccessConfirmOrResponse& Response)
            : APPBaseCallbackParameter(Response.m_SourceAddress, Response.m_DestinationAddress)
            , m_LongInvokeIDAndPriority(Response.m_LongInvokeIDAndPriority)
            , m_DateTime(Response.m_DateTime)
            , m_AccessResults(Response.m_AccessResults)
            , m_AccessDatas(Response.m_AccessDatas)
            //, m_pGloResponse(Response.m_pGloResponse ? std::make_unique<GLO::Access_Response>(GLO::Access_Response(*Response.m_pGloResponse)) : nullptr)
        {
            if (Response.m_pGloResponse)
                m_pGloResponse = std::make_unique<GLO::Access_Response>(*Response.m_pGloResponse);
        }

        LongInvokeIdAndPriorityType m_LongInvokeIDAndPriority;
        COSEMDateTime               m_DateTime;
        AccessResponseSpecs         m_AccessResults;
        AccessResponseDatas         m_AccessDatas;
        APPAccessRequestOrIndication::AccessRequestSpecs * m_pAccessRequestSpecs = nullptr;
        std::unique_ptr<GLO::Access_Response> m_pGloResponse = nullptr;          // Himanshu - GLO
    };

    using AccessRequestEventData = COSEMEventData<APPAccessRequestOrIndication>;
    using AccessResponseEventData = COSEMEventData<APPAccessConfirmOrResponse>;
    //
    // COSEMClient
    //
    class COSEMClient : public COSEM
    {
    public:
        COSEMClient() = delete;
        COSEMClient(COSEMAddressType ClientAddress);
        virtual ~COSEMClient();

        virtual void UpdateAddress(COSEMAddressType ClientAddress)
        {
            m_Address = ClientAddress;
        }   // Himanshu

        virtual COSEMAddressType GetAssociatedAddress() const;
        //
        // COSEM
        //
        virtual COSEMRunResult Process();
        //
        // COSEM-OPEN Service
        //
        bool OpenRequest(const APPOpenRequestOrIndication& Parameters);
        void RegisterOpenConfirm(CallbackFunction Callback);
        //
        // COSEM-GET Service
        //
        bool GetRequest(const APPGetRequestOrIndication& Parameters);
        void RegisterGetConfirm(CallbackFunction Callback);
        //
        // COSEM-SET Service
        //
        bool SetRequest(const APPSetRequestOrIndication& Parameters);
        void RegisterSetConfirm(CallbackFunction Callback);
        //
        // COSEM-ACTION Service
        //
        bool ActionRequest(const APPActionRequestOrIndication& Parameters);
        void RegisterActionConfirm(CallbackFunction Callback);
        //
        // COSEM-RELEASE Service
        //
        bool ReleaseRequest(const APPReleaseRequestOrIndication& Parameters);
        void RegisterReleaseConfirm(CallbackFunction Callback);
        //
        // COSEM-ACCESS Service - Himanshu - ACCESS
        //
        bool AccessRequest(const APPAccessRequestOrIndication& Parameters);
        void RegisterAccessConfirm(CallbackFunction Callback);

    protected:
        //
        // State Machine
        //
        void ST_Inactive_Handler(EventData * pData);
        void ST_Idle_Handler(EventData * pData);
        void ST_Association_Pending_Handler(EventData * pData);
        void ST_Association_Release_Pending_Handler(EventData * pData);
        void ST_Associated_Handler(EventData * pData);
        //
        // APDU Handlers
        //
        virtual bool AARQ_Handler(const IAPDUPtr& pAPDU);
        virtual bool AARE_Handler(const IAPDUPtr& pAPDU);
        virtual bool GET_Request_Handler(const IAPDUPtr& pAPDU);
        virtual bool GET_Response_Handler(const IAPDUPtr& pAPDU);
        virtual bool SET_Request_Handler(const IAPDUPtr& pAPDU);
        virtual bool SET_Response_Handler(const IAPDUPtr& pAPDU);
        virtual bool ACTION_Request_Handler(const IAPDUPtr& pAPDU);
        virtual bool ACTION_Response_Handler(const IAPDUPtr& pAPDU);
        virtual bool RLRQ_Handler(const IAPDUPtr& pAPDU);
        virtual bool RLRE_Handler(const IAPDUPtr& pAPDU);

        // Himanshu - ACCESS
        virtual bool ACCESS_Request_Handler(const IAPDUPtr& pAPDU);
        virtual bool ACCESS_Response_Handler(const IAPDUPtr& pAPDU);

        COSEMAddressType  m_AssociatedAddress = INVALID_ADDRESS;

    };

    class COSEMServer : public COSEM, public LogicalDevice
    {
    public:
        COSEMServer() = delete;
        COSEMServer(COSEMAddressType SAP);
        virtual ~COSEMServer();
        //
        // COSEM
        //
        virtual COSEMRunResult Process();
        //
        // COSEM-OPEN Service
        //
        bool OpenResponse(const APPOpenConfirmOrResponse& Parameters);
        //
        // COSEM-GET Service
        //
        bool GetResponse(const APPGetConfirmOrResponse& Parameters);
        //
        // COSEM-SET Service
        //
        bool SetResponse(const APPSetConfirmOrResponse& Parameters);
        //
        // COSEM-ACTION Service
        //
        bool ActionResponse(const APPActionConfirmOrResponse& Parameters);
        //
        // COSEM-RELEASE Service
        //
        bool ReleaseResponse(const APPReleaseConfirmOrResponse& Parameters);
        //
        // COSEM-ACCESS Service - Himanshu - ACCESS
        //
        bool AccessResponse(const APPAccessConfirmOrResponse& Parameters);

    protected:
        //
        // Server Event Handlers
        //
        //
        // COSEM-OPEN Service
        //
        virtual bool OnOpenIndication(const APPOpenRequestOrIndication& Parameters);
        //
        // COSEM-GET Service
        //
        virtual bool OnGetIndication(const APPGetRequestOrIndication& Parameters);
        //
        // COSEM-SET Service
        //
        virtual bool OnSetIndication(const APPSetRequestOrIndication& Parameters);
        //
        // COSEM-ACTION Service
        //
        virtual bool OnActionIndication(const APPActionRequestOrIndication& Parameters);
        //
        // COSEM-RELEASE Service
        //
        virtual bool OnReleaseIndication(const APPReleaseRequestOrIndication& Parameters);
        //
        // COSEM-ABORT Service
        //
        virtual bool OnAbortIndication(const APPAbortIndication& Parameters);
        //
        // COSEM-ACCESS Service - Himanshu - ACCESS
        //
        virtual bool OnAccessIndication(const APPAccessRequestOrIndication& Parameters);
        //
        // State Machine
        //
        void ST_Inactive_Handler(EventData * pData);
        void ST_Idle_Handler(EventData * pData);
        void ST_Association_Pending_Handler(EventData * pData);
        void ST_Association_Release_Pending_Handler(EventData * pData);
        void ST_Associated_Handler(EventData * pData);
        //
        // APDU Handlers
        //
        virtual bool AARQ_Handler(const IAPDUPtr& pAPDU);
        virtual bool AARE_Handler(const IAPDUPtr& pAPDU);
        virtual bool GET_Request_Handler(const IAPDUPtr& pAPDU);
        virtual bool GET_Response_Handler(const IAPDUPtr& pAPDU);
        virtual bool SET_Request_Handler(const IAPDUPtr& pAPDU);
        virtual bool SET_Response_Handler(const IAPDUPtr& pAPDU);
        virtual bool ACTION_Request_Handler(const IAPDUPtr& pAPDU);
        virtual bool ACTION_Response_Handler(const IAPDUPtr& pAPDU);
        virtual bool RLRQ_Handler(const IAPDUPtr& pAPDU);
        virtual bool RLRE_Handler(const IAPDUPtr& pAPDU);

        // Himanshu - ACCESS
        virtual bool ACCESS_Request_Handler(const IAPDUPtr& pAPDU);
        virtual bool ACCESS_Response_Handler(const IAPDUPtr& pAPDU);
    };

}
