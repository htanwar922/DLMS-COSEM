// ===========================================================================
// Copyright (c) 2018, Electric Power Research Institute (EPRI)
// All rights reserved.
//
// DLMS-COSEM ("this software") is licensed under BSD 3-Clause license.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// *  Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// *  Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// *  Neither the name of EPRI nor the names of its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
// OF SUCH DAMAGE.
//
// This EPRI software incorporates work covered by the following copyright and permission
// notices. You may not use these works except in compliance with their respective
// licenses, which are provided below.
//
// These works are provided by the copyright holders and contributors "as is" and any express or
// implied warranties, including, but not limited to, the implied warranties of merchantability
// and fitness for a particular purpose are disclaimed.
//
// This software relies on the following libraries and licenses:
//
// ###########################################################################
// Boost Software License, Version 1.0
// ###########################################################################
//
// * asio v1.10.8 (https://sourceforge.net/projects/asio/files/)
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//

#pragma once

#include <limits>
#include <memory>
#include <map>
#include <set>

#include "interfaces/COSEMData.h"
#include "interfaces/COSEMAttribute.h"
#include "interfaces/COSEMMethod.h"
#include "COSEM/COSEMObjectInstanceID.h"
#include "COSEM/COSEMTypes.h"

namespace EPRI
{

    class ICOSEMObject;
    class Association;
    class AssociationContext;
    class SelectiveAccess : public COSEMType {
    public:
        SelectiveAccess(SchemaType DT) : COSEMType(DT) {}
        virtual ~SelectiveAccess() = default;   // Himanshu
    };

    // Himanshu
    class ICOSEM {
    protected:
        // Himanshu - for ProfileGeneric
        using AttributeAccessRightsMap = std::map<ObjectAttributeIdType, uint8_t>;
        using MethodAccessRightsMap = std::map<ObjectMethodIdType, uint8_t>;

        struct COSEMObjectValueType {
            DLMSValue capture_value;
            AttributeAccessRightsMap attribute_access;
            MethodAccessRightsMap method_access;
        };

        using COSEMObjectInstanceIDList = std::set<COSEMObjectInstanceID>;
        using COSEMObjectValueMap = std::map<COSEMObjectInstanceID, COSEMObjectValueType>;
        using COSEMAttributeMap = std::map<ObjectAttributeIdType, ICOSEMAttribute*>;
        using COSEMMethodMap = std::map<ObjectAttributeIdType, ICOSEMMethod*>;

    public:
        virtual ~ICOSEM() = default;

        virtual bool RegisterObjectInstanceID(const COSEMObjectInstanceID& ObjectInstanceID);
        virtual COSEMObjectInstanceIDList GetObjectInstanceIDList() const;

        virtual void SetCaptureValue(const COSEMObjectInstanceID& ObjectId, const DLMSValue& Value);
        virtual DLMSValue GetCaptureValue(const COSEMObjectInstanceID& ObjectId) const;

        virtual void SetAttributeAccessRights(COSEMObjectInstanceID ObjectId, ObjectAttributeIdType AttributeId, uint8_t AccessRights);
        virtual void SetMethodAccessRights(COSEMObjectInstanceID ObjectId, ObjectAttributeIdType MethodId, uint8_t AccessRights);
        virtual uint8_t GetAttributeAccessRights(COSEMObjectInstanceID ObjectId, ObjectAttributeIdType AttributeId) const;
        virtual uint8_t GetMethodAccessRights(COSEMObjectInstanceID ObjectId, ObjectAttributeIdType MethodId) const;
        virtual DLMSStructure GetAccessRights(COSEMObjectInstanceID ObjectId) const;

        virtual uint16_t GetClassID() const = 0;
        virtual uint8_t GetVersion() const = 0;

    protected:
        virtual void CheckExists(const COSEMObjectInstanceID& ObjectId) const;

        COSEMObjectValueMap m_ObjectValueMap;
        COSEMAttributeMap m_Attributes;
        COSEMMethodMap    m_Methods;

    };

    class ICOSEMInterface : virtual public ICOSEM
    {
        friend class ICOSEMObject;
        friend class SelectiveAccess;

    public:
        ICOSEMInterface() = delete;
        ICOSEMInterface(uint16_t class_id,
            uint8_t version,
            uint16_t CardinalityMin = 0,
            uint16_t CardinalityMax = std::numeric_limits<uint16_t>::max());
        virtual ~ICOSEMInterface();

        enum InterfaceProperties : uint8_t
        {
            CLASS_ID,
            VERSION,
            CARDINALITY_MIN,
            CARDINALITY_MAX
        };

        virtual uint16_t GetPropertyValue(InterfaceProperties Property) const;

        enum Attributes : ObjectAttributeIdType
        {
            ATTRIBUTE_0  = 0,
            LOGICAL_NAME = 1
        };

        COSEMAttribute<LOGICAL_NAME, OctetStringSchema, 0x00> logical_name;

        // Himanshu
        virtual uint16_t GetClassID() const;
        virtual uint8_t GetVersion() const;

    protected:
        virtual void RegisterAttribute(ICOSEMAttribute * pAttribute);
        virtual void RegisterMethod(ICOSEMMethod * pMethod);
        virtual ICOSEMAttribute * FindAttribute(ObjectAttributeIdType AttributeId) const;
        virtual ICOSEMMethod * FindMethod(ObjectAttributeIdType MethodId) const;
        inline bool HasAttribute(ObjectAttributeIdType AttributeId) const
        {
            return FindAttribute(AttributeId) != nullptr;
        }
        inline bool HasMethod(ObjectAttributeIdType MethodId) const
        {
            return FindMethod(MethodId) != nullptr;
        }

        const uint16_t    m_class_id;
        const uint8_t     m_version;
        const uint16_t    m_CardinalityMin;
        const uint16_t    m_CardinalityMax;
        static uint16_t   m_CardinalityCounter;
    };

    class ICOSEMObject : virtual public ICOSEM
    {
        friend class SelectiveAccess;
    public:
        ICOSEMObject() = delete;
        ICOSEMObject(const COSEMObjectInstanceCriteria& Criteria,
            uint16_t ShortNameBase = std::numeric_limits<uint16_t>::max());
        virtual ~ICOSEMObject();

        virtual bool Supports(const Cosem_Attribute_Descriptor& Descriptor) const;
        virtual bool Supports(const Cosem_Method_Descriptor& Descriptor) const;
        virtual APDUConstants::Data_Access_Result Get(const AssociationContext& Context,
            DLMSVector * pData,
            const Cosem_Attribute_Descriptor& Descriptor,
            SelectiveAccess * pSelectiveAccess = nullptr);
        virtual APDUConstants::Data_Access_Result Set(const AssociationContext& Context,
            const Cosem_Attribute_Descriptor& Descriptor,
            const DLMSVector& Data,
            SelectiveAccess * pSelectiveAccess = nullptr);
        virtual APDUConstants::Action_Result Action(const AssociationContext& Context,
            const Cosem_Method_Descriptor& Descriptor,
            const DLMSOptional<DLMSVector>& Parameters,
            DLMSVector * pReturnValue = nullptr);

    protected:
        virtual ICOSEMAttribute * FindAttribute(ObjectAttributeIdType AttributeId) const;
        virtual ICOSEMMethod * FindMethod(ObjectAttributeIdType MethodId) const;

        virtual APDUConstants::Data_Access_Result InternalGet(const AssociationContext& Context,
            ICOSEMAttribute * pAttribute,
            const Cosem_Attribute_Descriptor& Descriptor,
            SelectiveAccess * pSelectiveAccess) = 0;
        virtual APDUConstants::Data_Access_Result InternalSet(const AssociationContext& Context,
            ICOSEMAttribute * pAttribute,
            const Cosem_Attribute_Descriptor& Descriptor,
            const DLMSVector& Data,
            SelectiveAccess * pSelectiveAccess);
        virtual APDUConstants::Action_Result InternalAction(const AssociationContext& Context,
            ICOSEMMethod * pMethod,
            const Cosem_Method_Descriptor& Descriptor,
            const DLMSOptional<DLMSVector>& Parameters,
            DLMSVector * pReturnValue = nullptr);

        // Himanshu - ACCESS
        virtual APDUConstants::Data_Access_Result InternalAccess(const AssociationContext& Context,
            ICOSEMMethod * pMethod,
            const Cosem_Method_Descriptor& Descriptor,
            const DLMSOptional<DLMSVector>& Parameters,
            DLMSVector * pReturnValue = nullptr);

        const COSEMObjectInstanceCriteria m_InstanceCriteria;
        const uint16_t                    m_ShortNameBase;

    };
}