// ===========================================================================
// Copyright (c) 2018, Electric Power Research Institute (EPRI)
// All rights reserved.
//
// DLMS-COSEM ("this software") is licensed under BSD 3-Clause license.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// *  Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// *  Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// *  Neither the name of EPRI nor the names of its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
// OF SUCH DAMAGE.
//
// This EPRI software incorporates work covered by the following copyright and permission
// notices. You may not use these works except in compliance with their respective
// licenses, which are provided below.
//
// These works are provided by the copyright holders and contributors "as is" and any express or
// implied warranties, including, but not limited to, the implied warranties of merchantability
// and fitness for a particular purpose are disclaimed.
//
// This software relies on the following libraries and licenses:
//
// ###########################################################################
// Boost Software License, Version 1.0
// ###########################################################################
//
// * asio v1.10.8 (https://sourceforge.net/projects/asio/files/)
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//

#pragma once

#include "interfaces/ICOSEMInterface.h"

namespace EPRI
{
    const uint16_t CLSID_IClock = 8;

    class IClock_0 : public ICOSEMInterface
    {
        COSEM_DEFINE_SCHEMA(Clock_Base_Schema)
        COSEM_DEFINE_SCHEMA(Adjusting_Time_Schema)

    public :
        IClock_0();
        virtual ~IClock_0();

        enum Attributes : ObjectAttributeIdType
        {
            ATTR_TIME          = 2,
            ATTR_TIME_ZONE     = 3,
            ATTR_STATUS        = 4,
            ATTR_DST_BEGIN     = 5,
            ATTR_DST_END       = 6,
            ATTR_DST_DEVIATION = 7,
            ATTR_DST_ENABLED   = 8,
            ATTR_CLOCK_BASE    = 9
        };

        enum ClockBase : uint8_t
        {
            NOT_DEFINED = 0,
            INTERNAL_CRYSTAL = 1,
            MAINS_50HZ = 2,
            MAINS_60HZ = 3,
            GPS = 4,
            RADIO = 5
        };

        COSEMAttribute<ATTR_TIME, OctetStringSchema, 0x08>                     time;
        COSEMAttribute<ATTR_TIME_ZONE, LongSchema, 0x10>                       time_zone;
        COSEMAttribute<ATTR_STATUS, UnsignedSchema, 0x18>                      status;
        COSEMAttribute<ATTR_DST_BEGIN, OctetStringSchema, 0x20>                daylight_savings_begin;
        COSEMAttribute<ATTR_DST_END, OctetStringSchema, 0x28>                  daylight_savings_end;
        COSEMAttribute<ATTR_DST_DEVIATION, IntegerSchema, 0x30>                daylight_savings_deviation;
        COSEMAttribute<ATTR_DST_ENABLED, BooleanSchema, 0x38>                  daylight_savings_enabled;
        COSEMAttribute<ATTR_CLOCK_BASE, Clock_Base_Schema, 0x40>               clock_base;

        enum Methods : ObjectAttributeIdType
        {
            METHOD_ADJUST_TO_QUARTER          = 1,
            METHOD_ADJUST_TO_MEAS_PERIOD      = 2,
            METHOD_ADJUST_TO_MINUTE           = 3,
            METHOD_ADJUST_TO_PRESET_TIME      = 4,
            METHOD_PRESET_ADJUSTING_TIME      = 5,
            METHOD_SHIFT_TIME                 = 6,
        };

        COSEMMethod<METHOD_ADJUST_TO_QUARTER, IntegerSchema, 0x60>             adjust_to_quarter;
        COSEMMethod<METHOD_ADJUST_TO_MEAS_PERIOD, IntegerSchema, 0x68>         adjust_to_measuring_period;
        COSEMMethod<METHOD_ADJUST_TO_MINUTE, IntegerSchema, 0x70>              adjust_to_minute;
        COSEMMethod<METHOD_ADJUST_TO_PRESET_TIME, IntegerSchema, 0x78>         adjust_to_preset_time;
        COSEMMethod<METHOD_PRESET_ADJUSTING_TIME, Adjusting_Time_Schema, 0x80> preset_adjusting_time;
        COSEMMethod<METHOD_SHIFT_TIME, LongSchema, 0x88>                       shift_time;
    };

    typedef IClock_0 IClock;

    class IClockObject : public IClock, public ICOSEMObject
    {
    public:
        IClockObject() = delete;
        IClockObject(const COSEMObjectInstanceCriteria& OIDCriteria,
            uint16_t ShortNameBase = std::numeric_limits<uint16_t>::max());
        virtual ~IClockObject();

    protected:
        virtual APDUConstants::Action_Result InternalAction(const AssociationContext& Context,
            ICOSEMMethod * pMethod,
            const Cosem_Method_Descriptor& Descriptor,
            const DLMSOptional<DLMSVector>& Parameters,
            DLMSVector * pReturnValue = nullptr) = 0;

    };

}