// ===========================================================================
// Copyright (c) 2018, Electric Power Research Institute (EPRI)
// All rights reserved.
//
// DLMS-COSEM ("this software") is licensed under BSD 3-Clause license.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// *  Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// *  Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// *  Neither the name of EPRI nor the names of its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
// OF SUCH DAMAGE.
//
// This EPRI software incorporates work covered by the following copyright and permission
// notices. You may not use these works except in compliance with their respective
// licenses, which are provided below.
//
// These works are provided by the copyright holders and contributors "as is" and any express or
// implied warranties, including, but not limited to, the implied warranties of merchantability
// and fitness for a particular purpose are disclaimed.
//
// This software relies on the following libraries and licenses:
//
// ###########################################################################
// Boost Software License, Version 1.0
// ###########################################################################
//
// * asio v1.10.8 (https://sourceforge.net/projects/asio/files/)
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
// 

#pragma once

#include <cstdint>
#include <initializer_list>
#include <vector>

#include "ASNType.h"
#include "APDUConstants.h"

namespace EPRI
{
#define ASN_BEGIN_COMPONENTS
        
#define ASN_COMPONENT(COMP)\
        RegisterComponent(&COMP);
        
#define ASN_END_COMPONENTS
    
#define DEFAULT_TAG_CLASS (0x80)

#define ASN_INVOKE_ID_AND_PRIORITY\
    ASN_BASE_TYPE(ASN::DT_Unsigned8)
   
    extern const ASNType ASNMissing;  
    class IAPDU;
    

    class IAPDUComponent
    {
        template <ASN::TagIDType TAG> 
            friend class APDU;
        friend class IAPDU;
        
    public:
        virtual ~IAPDUComponent() 
        {
        }
        virtual bool IsValid() const = 0;
        virtual bool Parse(DLMSVector * pData) = 0;
        virtual void Clear() = 0;
        
    protected:
        virtual bool AppendToVector(DLMSVector * pVector) = 0;
    };

    template <ASN::TagIDType TAGID, ASN::SchemaType DT, 
        ASN::ComponentOptionType OPT = ASN::NO_OPTIONS, 
        uint8_t TAGCLASS = DEFAULT_TAG_CLASS, const ASNType& DEFAULT = ASNMissing>    
    class APDUComponent : public IAPDUComponent, public ASNType
    {
    public:
        const ASN::TagIDType           Tag = TAGID;
        const ASN::ComponentOptionType Options = OPT;
        const uint8_t                  APDUTagClass = TAGCLASS;
        
        APDUComponent()
            : ASNType(DT)
        {
        }
        
        virtual ~APDUComponent()
        {
        }
        //
        // ASNType
        //
        virtual std::vector<uint8_t> GetBytes()
        {
            return GetBytes(APDUTagClass | Tag, Options);
        }

        virtual bool Append(const DLMSValue& Value)
        {
            return ASNType::Append(Value);
        }
        //
        // Operators
        //
        operator const std::vector<uint8_t>()
        {
            return GetBytes();
        }
        
        bool operator==(const std::vector<uint8_t>& rhs)
        {
            return GetBytes() == rhs;
        }
        //
        // IAPDUComponent
        //
        virtual bool Parse(DLMSVector * pData)
        {
            bool RetVal = false;
            try
            {
                // My tag?
                //
                if(false == pData->IsAtEnd() &&
                   ASN_MAKE_TAG(APDUTagClass | Tag, Options) == pData->Peek<uint8_t>() &&
                   pData->Skip(sizeof(uint8_t)))
                {
                    size_t Length = 0;
                    RetVal = GetLength(pData, &Length);
                    if (RetVal)
                    {
                        RetVal = m_Data.Append(pData, Length) >= 0;
                    }
                }
                // 
                // Optional?
                //
                if (Options & ASN::OPTIONAL)
                {
                    RetVal = true;
                }
            }
            catch (std::overflow_error const& ex)
            {
                RetVal = false;
            }
            return RetVal;

        }
        
        virtual void Clear()
        {
            m_Data.Clear();
        }
        
        virtual bool IsValid() const
        {
            bool RetVal = (!(Options & ASN::OPTIONAL) &&
                            IsEmpty());
            if (RetVal)
            {
                
            }
            return RetVal;
        }
       
    protected:
        //
        // IAPDUComponent
        //
        virtual bool AppendToVector(DLMSVector * pVector)
        {
            try
            {
                pVector->Append(GetBytes());
            }
            catch (...)
            {
                return false;
            }
            return true;
        }
        
    private:
        //
        // ASNType (Change Visibility)
        //
        virtual std::vector<uint8_t> GetBytes(ASN::TagIDType Tag, ASN::ComponentOptionType Options)
        {
            return ASNType::GetBytes(Tag, Options);
        }
        
    };
    
    template <ASN::TagIDType TAGID, ASN::ComponentOptionType OPT = ASN::CONSTRUCTED>
        using APDU_application_context_name = APDUComponent<TAGID, ASN::ObjectIdentifierSchema, OPT>;
    template <ASN::TagIDType TAGID, ASN::ComponentOptionType OPT = ASN::CONSTRUCTED | ASN::OPTIONAL>
        using APDU_AP_title = APDUComponent<TAGID, ASN::OctetStringSchema, OPT>;
    template <ASN::TagIDType TAGID, ASN::ComponentOptionType OPT = ASN::CONSTRUCTED | ASN::OPTIONAL>
        using APDU_AE_qualifier = APDUComponent<TAGID, ASN::OctetStringSchema, OPT>;
    template <ASN::TagIDType TAGID, ASN::ComponentOptionType OPT = ASN::CONSTRUCTED | ASN::OPTIONAL>
        using APDU_AP_invocation_identifier = APDUComponent<TAGID, ASN::IntegerSchema, OPT>;
    template <ASN::TagIDType TAGID, ASN::ComponentOptionType OPT = ASN::CONSTRUCTED | ASN::OPTIONAL>
        using APDU_AE_invocation_identifier = APDUComponent<TAGID, ASN::IntegerSchema, OPT>;
    template <ASN::TagIDType TAGID, ASN::ComponentOptionType OPT = ASN::OPTIONAL | ASN::IMPLICIT>
        using APDU_Mechanism_name = APDUComponent<TAGID, ASN::ImplicitObjectIdentifierSchema, OPT>;
    template <ASN::TagIDType TAGID, ASN::ComponentOptionType OPT = ASN::OPTIONAL | ASN::IMPLICIT>
        using APDU_Implementation_data = APDUComponent<TAGID, ASN::GraphicStringSchema, OPT>;
    template <ASN::TagIDType TAGID, ASN::ComponentOptionType OPT = ASN::CONSTRUCTED | ASN::OPTIONAL | ASN::EXPLICIT>
        using APDU_Association_information = APDUComponent<TAGID, ASN::OctetStringSchema, OPT>;
    template <ASN::TagIDType TAGID, ASN::ComponentOptionType OPT = ASN::IMPLICIT | ASN::OPTIONAL>
        using APDU_Protocol_Version = APDUComponent<TAGID, APDUConstants::protocol_version_Schema, OPT, DEFAULT_TAG_CLASS,
                                                    APDUConstants::protocol_version_default>;
    template <ASN::TagIDType TAGID, ASN::ComponentOptionType OPT = ASN::OPTIONAL | ASN::IMPLICIT>
        using APDU_ACSE_Requirements = APDUComponent<TAGID, APDUConstants::acse_requirements_Schema, OPT>;
    template <ASN::TagIDType TAGID, ASN::ComponentOptionType OPT = ASN::CONSTRUCTED | ASN::EXPLICIT | ASN::OPTIONAL>
        using APDU_Authentication_Value = APDUComponent<TAGID, APDUConstants::authentication_value_Schema, OPT>;
    

}
