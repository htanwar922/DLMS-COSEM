// ===========================================================================
// Copyright (c) 2018, Electric Power Research Institute (EPRI)
// All rights reserved.
//
// DLMS-COSEM ("this software") is licensed under BSD 3-Clause license.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// *  Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// *  Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// *  Neither the name of EPRI nor the names of its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
// OF SUCH DAMAGE.
//
// This EPRI software incorporates work covered by the following copyright and permission
// notices. You may not use these works except in compliance with their respective
// licenses, which are provided below.
//
// These works are provided by the copyright holders and contributors "as is" and any express or
// implied warranties, including, but not limited to, the implied warranties of merchantability
// and fitness for a particular purpose are disclaimed.
//
// This software relies on the following libraries and licenses:
//
// ###########################################################################
// Boost Software License, Version 1.0
// ###########################################################################
//
// * asio v1.10.8 (https://sourceforge.net/projects/asio/files/)
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
// 

#pragma once

#include "DLMSValue.h"
#include "COSEM/COSEMTypes.h"
#include "APDU/APDUConstants.h"
#include "APDU/APDU.h"
#include "APDU/ASNType.h"

namespace EPRI
{
    namespace xDLMS
    {
        enum ConformanceBits
        {
            reserved_zero                    = 0,
            general_protection               = 1,
            general_block_transfer           = 2,
            read                             = 3,
            write                            = 4,
            unconfirmed_write                = 5,
            delta_value_encoding             = 6,
            reserved_seven                   = 7,
            attribute0_supported_with_set    = 8,
            priority_mgmt_supported          = 9,
            attribute_0_supported_with_get   = 10,
            block_transfer_with_get_or_read  = 11,
            block_transfer_with_set_or_write = 12,
            block_transfer_with_action       = 13,
            multiple_references              = 14,
            information_report               = 15,
            data_notification                = 16,
            access                           = 17,
            parameterized_access             = 18,
            get                              = 19,
            set                              = 20,
            selective_access                 = 21,
            event_notification               = 22,
            action                           = 23,
            max_bits                         = 24
        };
        
        using ConformanceBitsType = DLMSBitSet;
        
        const ConformanceBitsType AvailableStackConformance
        (
            1 << ConformanceBits::get |
            1 << ConformanceBits::set |
            1 << ConformanceBits::action |
            1 << ConformanceBits::access |
            1 << ConformanceBits::general_protection
        );
        
        class Context
        {
        public:
            typedef DLMSOptional<DLMSVector> DedicatedKeyType;
            typedef DLMSOptional<int8_t>     QOSType;
            
            Context();
            Context(uint16_t APDUSize,
                const ConformanceBitsType& Conformance = AvailableStackConformance,
                uint8_t DLMSVersion = APDUConstants::CURRENT_DLMS_VERSION,
                const QOSType& QOS = DLMSOptionalNone);
            Context(const Context& RHS);
            Context& operator=(const Context& RHS);
            virtual ~Context();

            void Clear();
            bool Initialized() const;
            uint16_t APDUSize() const;
            ConformanceBitsType ConformanceBits() const;
            ConformanceBitsType SetConformance(const ConformanceBitsType& Bits);
            uint8_t DLMSVersion() const;
            DLMSValue DedicatedKey() const;
            DLMSValue QOS() const;
            
        protected:
            bool                m_Initialized = false;
            uint16_t            m_APDUSize = 0;
            ConformanceBitsType m_Conformance;
            uint8_t             m_DLMSVersion = 0;
            DedicatedKeyType    m_DedicatedKey;
            QOSType             m_QOS;
        };
        
        template <ASN::TagIDType TAG>
            class InitiateBase : public Context, public APDUSingleType<TAG>
            {
            public:
                virtual ~InitiateBase()
                {
                }
                //
                // APDUSingleType
                //
                virtual std::vector<uint8_t> GetBytes() final
                {
                    if (Serialize())
                    {
                        return APDUSingleType<TAG>::GetBytes();
                    }
                    return std::vector<uint8_t>();
                }
                bool Parse(DLMSVector * pData)
                {
                    if (APDUSingleType<TAG>::Parse(pData))
                    {
                        if (Deserialize())
                        {
                            return (m_Initialized = true);
                        }
                    }
                    return false;
                }
                virtual void Clear()
                {
                    APDUSingleType<TAG>::Clear();
                    Context::Clear();
                }

            protected:
                InitiateBase(ASN::SchemaEntryPtr SchemaEntry)
                    : APDUSingleType<TAG>::APDUSingleType(SchemaEntry)
                {
                }
                InitiateBase(ASN::SchemaEntryPtr SchemaEntry,
                    uint16_t APDUSize,
                    const ConformanceBitsType& Conformance = AvailableStackConformance,
                    uint8_t DLMSVersion = APDUConstants::CURRENT_DLMS_VERSION,
                    const QOSType& QOS = DLMSOptionalNone)
                    : Context(APDUSize, Conformance, DLMSVersion, QOS)
                    , APDUSingleType<TAG>::APDUSingleType(SchemaEntry)
                {
                }
                //
                // IAPDU
                //
                virtual bool IsValid() const final
                {
                    return true;
                }
                
                virtual bool Serialize() = 0;
                virtual bool Deserialize() = 0;
            
            };
        
        class InitiateResponse;
        
        class InitiateRequest : public InitiateBase<1>
        {
            ASN_DEFINE_SCHEMA(InitiateRequest_Schema)
            friend class InitiateResponse;
            
        public:
            typedef DLMSOptional<bool> ResponseAllowedType;
            
            InitiateRequest();
            InitiateRequest(uint16_t APDUSize,
                const ConformanceBitsType& Conformance = AvailableStackConformance,
                const DedicatedKeyType& DedicatedKey = DLMSOptionalNone,
                const ResponseAllowedType& ResponseAllowed = DLMSOptionalNone,
                uint8_t DLMSVersion = APDUConstants::CURRENT_DLMS_VERSION,
                const QOSType& QOS = DLMSOptionalNone);
            virtual ~InitiateRequest();
                        
            DLMSValue ResponseAllowed() const;
            //
            // InitiateBase
            //
            virtual void Clear() final;

        protected:
            virtual bool Serialize();
            virtual bool Deserialize();
            
            ResponseAllowedType m_ResponseAllowed;
        };
    
        class InitiateResponse : public InitiateBase<8>
        {
            ASN_DEFINE_SCHEMA(InitiateResponse_Schema)

        public:
            InitiateResponse();
            InitiateResponse(const InitiateRequest& Request, bool LogicalNameReferencing = true);
            InitiateResponse(uint16_t APDUSize,
                const ConformanceBitsType& Conformance = AvailableStackConformance,
                uint8_t DLMSVersion = APDUConstants::CURRENT_DLMS_VERSION,
                bool LogicalNameReferencing = true,
                const QOSType& QOS = DLMSOptionalNone);
            virtual ~InitiateResponse();
            
            uint16_t VAAName() const;
            //
            // InitiateBase
            //
            virtual void Clear() final;
            
        protected:
            virtual bool Serialize();
            virtual bool Deserialize();
            
            bool m_LogicalNameReferencing = true;
        };        

        namespace GLO {
            class InitiateRequest : public EPRI::GLO::CipheredBase<0x21>
            {
            public:
                InitiateRequest() = default;
                InitiateRequest(const InitiateRequest& Request)
                    : EPRI::GLO::CipheredBase<0x21>(Request)
                {
                }
                virtual ~InitiateRequest() = default;
            };

            class InitiateResponse : public EPRI::GLO::CipheredBase<0x28>
            {
            public:
                InitiateResponse() = default;
                InitiateResponse(const InitiateResponse& Response)
                    : EPRI::GLO::CipheredBase<0x28>(Response)
                {
                }
                virtual ~InitiateResponse() = default;
            };
        }

        class InitiateRequestVariant {
            enum RequestType
            {
                none = 0,
                plain = 1,
                glo_ciphered = 2
            };
        public:
            InitiateRequestVariant();
            InitiateRequestVariant(const InitiateRequest& Request);
            InitiateRequestVariant(const GLO::InitiateRequest& Request);
            InitiateRequestVariant(const InitiateRequestVariant& Request);
            ~InitiateRequestVariant();

            InitiateRequest& GetPlainRequest() const;
            GLO::InitiateRequest& GetGloRequest() const;
 
            bool Initialized() const;
            bool IsPlain() const;
            bool IsGloCiphered() const;

            bool Parse(DLMSVector* pData);
            std::vector<uint8_t>GetBytes() const;

        private:
            RequestType m_Type;
            void * m_pRequest;
        };

        class InitiateResponseVariant {
            enum ResponseType
            {
                none = 0,
                plain = 1,
                glo_ciphered = 2
            };
        public:
            InitiateResponseVariant();
            InitiateResponseVariant(const InitiateResponse& Response);
            InitiateResponseVariant(const GLO::InitiateResponse& Response);
            InitiateResponseVariant(const InitiateResponseVariant& Response);
            ~InitiateResponseVariant();

            InitiateResponse& GetPlainResponse() const;
            GLO::InitiateResponse& GetGloResponse() const;

            bool Initialized() const;
            bool IsPlain() const;
            bool IsGloCiphered() const;

            bool Parse(DLMSVector* pData);
            std::vector<uint8_t>GetBytes() const;

        private:
            ResponseType m_Type;
            void* m_pResponse;
        };
    }

}
