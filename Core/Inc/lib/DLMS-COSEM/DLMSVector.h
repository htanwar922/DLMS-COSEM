// ===========================================================================
// Copyright (c) 2018, Electric Power Research Institute (EPRI)
// All rights reserved.
//
// DLMS-COSEM ("this software") is licensed under BSD 3-Clause license.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// *  Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// *  Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// *  Neither the name of EPRI nor the names of its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
// OF SUCH DAMAGE.
//
// This EPRI software incorporates work covered by the following copyright and permission
// notices. You may not use these works except in compliance with their respective
// licenses, which are provided below.
//
// These works are provided by the copyright holders and contributors "as is" and any express or
// implied warranties, including, but not limited to, the implied warranties of merchantability
// and fitness for a particular purpose are disclaimed.
//
// This software relies on the following libraries and licenses:
//
// ###########################################################################
// Boost Software License, Version 1.0
// ###########################################################################
//
// * asio v1.10.8 (https://sourceforge.net/projects/asio/files/)
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//

#pragma once

#include <iostream>
#include <bitset>
#include <cstdint>
#include <string>
#include <type_traits>
#include <sstream>
#include <vector>
#include <cassert>

#include "optional.h"
#include "config.h"

namespace EPRI
{
    class DLMSValue;

    class DLMSVector
    {
    public:
        DLMSVector();
        DLMSVector(size_t Size);
        DLMSVector(const std::initializer_list<uint8_t>& Value);
        DLMSVector(const DLMSVector& Value, size_t Position = 0, size_t Count = 0);
        DLMSVector(const std::vector<uint8_t>& Value);
        DLMSVector(const void * pBuffer, size_t Size);
        ~DLMSVector();

        size_t Size() const;
        size_t GetReadPosition() const;
        bool SetReadPosition(size_t value);
        bool IsAtEnd() const;
        bool Skip(size_t Count);
        bool Zero(size_t Position = 0, size_t Count = 0);
        void RemoveReadBytes();
        void Resize(size_t Size);

        template <typename _VariantType, uint8_t BitsToAppend = 0>
        	size_t Append(_VariantType Value, bool BigEndian = true);
        size_t AppendFloat(float Value);
        size_t AppendDouble(double Value);
        size_t AppendBuffer(const void * pValue, size_t Count);
        ssize_t Append(const DLMSVector& Value, size_t Position = 0, size_t Count = 0);
        ssize_t Append(DLMSVector * pValue, size_t Count = 0);
        size_t Append(const std::string& Value);
        size_t Append(const std::vector<uint8_t>& Value);
        size_t Append(const DLMSValue& Value, bool Trim = true);
        size_t AppendExtra(size_t Count);
        void Clear();

        template <typename _VariantType, uint8_t BitsToGet = 0>
			bool Get(DLMSValue * pValue, bool BigEndian = true);
        template <typename T, uint8_t BitsToGet = 0>
            T Get(bool BigEndian = true);
        bool Get(std::string * pValue, size_t Count, bool Append = false);
        bool GetBuffer(uint8_t * pValue, size_t Count);
        bool GetVector(DLMSVector * pValue, size_t Count);
        std::vector<uint8_t> GetBytes() const;
        const uint8_t * GetData() const;

        int PeekByte(size_t OffsetFromGetPosition = 0) const;
        int PeekByteAtEnd(size_t OffsetFromEndOfVector = 0) const;
        bool PeekBuffer(uint8_t * pValue, size_t Count) const;
        template <typename _VariantType, uint8_t BitsToPeek = 0>
            bool Peek(DLMSValue * pValue, bool BigEndian = true, size_t Offset = 0, size_t * pBytesPeeked = nullptr) const;
        template <typename T, uint8_t BitsToGet = 0>
            T Peek(size_t Offset = 0, bool BigEndian = true) const;

        std::string ToString() const;
        //
        // Operators
        //
        DLMSVector& operator=(DLMSVector& lval);
        DLMSVector& operator=(const DLMSVector& lval);
        uint8_t& operator[](size_t Index);
        const uint8_t& operator[](size_t Index) const;
        bool operator==(const DLMSVector& rhs) const;
        bool operator!=(const DLMSVector& rhs) const;
        operator bool() const;

    private:
        using RawData = std::vector<uint8_t>;
        RawData                 m_Data;
        size_t                  m_ReadPosition = 0;
    };

    template <typename _VariantType, uint8_t BitsToAppend /*= 0*/>
	size_t DLMSVector::Append(_VariantType Value, bool BigEndian /*= true*/)
	{
		static_assert(BitsToAppend == 0 || BitsToAppend == 8 || BitsToAppend == 16 ||
					  BitsToAppend == 32 || BitsToAppend == 64,
			"Bits must be 0, 8, 16, 32, or 64");
		static_assert(std::is_integral<_VariantType>::value,
			"_VariantType must be an integral type");

		typedef typename
			std::conditional
			<
				BitsToAppend == 0,
				_VariantType,
				typename std::conditional
				<
					BitsToAppend == 8,
					uint8_t,
					typename std::conditional
					<
						BitsToAppend == 16,
						uint16_t,
						typename std::conditional
						<
							BitsToAppend == 32,
							uint32_t,
							typename std::conditional
							<
								BitsToAppend == 64,
								uint64_t,
								void
							>::type
						>::type
					>::type
				>::type
			>::type AppendBaseType;

		static_assert(sizeof(_VariantType) >= sizeof(AppendBaseType),
			"Variant type is too small");

		size_t RetVal = m_Data.size();
		for (size_t Index = 0; Index < sizeof(AppendBaseType); ++Index)
		{
			if (BigEndian)
			{
				m_Data.push_back(0xFF & (Value >> ((sizeof(AppendBaseType) - Index - 1) * 8)));
			}
			else
			{
				m_Data.push_back(0xFF & (Value >> (Index * 8)));
			}
		}
		return RetVal;
	}

}
