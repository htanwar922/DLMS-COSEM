// ===========================================================================
// Copyright (c) 2018, Electric Power Research Institute (EPRI)
// All rights reserved.
//
// DLMS-COSEM ("this software") is licensed under BSD 3-Clause license.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// *  Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// *  Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// *  Neither the name of EPRI nor the names of its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
// OF SUCH DAMAGE.
//
// This EPRI software incorporates work covered by the following copyright and permission
// notices. You may not use these works except in compliance with their respective
// licenses, which are provided below.
//
// These works are provided by the copyright holders and contributors "as is" and any express or
// implied warranties, including, but not limited to, the implied warranties of merchantability
// and fitness for a particular purpose are disclaimed.
//
// This software relies on the following libraries and licenses:
//
// ###########################################################################
// Boost Software License, Version 1.0
// ###########################################################################
//
// * asio v1.10.8 (https://sourceforge.net/projects/asio/files/)
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
// 

#include <cstdint>

#include "modcnt.h"

namespace EPRI
{

	modcounter& modcounter::operator=(uint8_t cRightHandSide)
	{
		SetModCounter(cRightHandSide);
		return (*this);
	}
 
	modcounter& modcounter::operator=(modcounter &RightHandSide)
	{
		SetModCounter(RightHandSide.m_cCounter);
		return (*this);
	}

	modcounter modcounter::operator+(modcounter &Other)
	{
		modcounter	NewModCounter( m_cBase, 
			(uint8_t)(m_cCounter + Other.m_cCounter));
		return NewModCounter;
	}

	modcounter modcounter::operator+(uint8_t Other)
	{
		modcounter	NewModCounter( m_cBase, 
			(uint8_t)(m_cCounter + Other));
		return NewModCounter;
	}

	modcounter modcounter::operator+(int nOther)
	{
		modcounter	NewModCounter( m_cBase, 
			(uint8_t)(m_cCounter + (uint8_t) nOther));
		return NewModCounter;
	}

	modcounter modcounter::operator+=(modcounter &Other)
	{
		modcounter	NewModCounter( m_cBase, 
			(uint8_t)(m_cCounter + Other.m_cCounter));
		return NewModCounter;
	}

	modcounter modcounter::operator+=(uint8_t Other)
	{
		modcounter	NewModCounter( m_cBase, 
			(uint8_t)(m_cCounter + Other));
		return NewModCounter;
	}

	modcounter modcounter::operator-(const modcounter &Other)
	{
		modcounter	NewModCounter( m_cBase, 
			(uint8_t)(m_cCounter - Other.m_cCounter));
		return NewModCounter;
	}

	modcounter modcounter::operator-(uint8_t Other)
	{
		modcounter	NewModCounter( m_cBase, 
			(uint8_t)(m_cCounter - Other));
		return NewModCounter;
	}

	modcounter modcounter::operator-(int nOther)
	{
		modcounter	NewModCounter( m_cBase, 
			(uint8_t)(m_cCounter - (uint8_t) nOther));
		return NewModCounter;
	}

	modcounter modcounter::operator-=(modcounter &Other)
	{
		modcounter	NewModCounter( m_cBase, 
			(uint8_t)(m_cCounter - Other.m_cCounter));
		return NewModCounter;
	}

	modcounter modcounter::operator-=(uint8_t Other)
	{
		modcounter	NewModCounter( m_cBase, 
			(uint8_t)(m_cCounter - Other));
		return NewModCounter;
	}

	modcounter& modcounter::operator++()
	{
		SetModCounter((uint8_t)(m_cCounter + 1));
		return (*this);
	}

	modcounter modcounter::operator++(int)
	{
		modcounter temp = *this;
		++*this;
		return temp;
	}

	modcounter& modcounter::operator--()
	{
		SetModCounter((uint8_t)(m_cCounter - 1));
		return (*this);
	}

	modcounter modcounter::operator--(int)
	{
		modcounter temp = *this;
		--*this;
		return temp;
	}

	void modcounter::SetModCounter(uint8_t cCounter)
	{
		m_cCounter = (uint8_t)(cCounter % m_cBase);
	}

	modcounter::operator uint8_t() const
	{
		return ((uint8_t) m_cCounter);
	}

	modcounter::operator int() const
	{
		return ((int) m_cCounter);
	}

	modcounter::operator short() const
	{
		return ((short) m_cCounter);
	}

	short operator==(modcounter &Param1, modcounter &Param2)
	{
		return (Param1.m_cCounter == Param2.m_cCounter);
	}

	mod8counter::mod8counter()
		: modcounter(8)
	{
	}

	mod8counter::mod8counter(uint8_t cCounter)
		: modcounter(8, cCounter)
	{
	}

	modcounter& mod8counter::operator=(uint8_t RightHandSide)
	{
		return (modcounter::operator=(RightHandSide));
	}

	modcounter& mod8counter::operator=(mod8counter &RightHandSide)
	{
		return (modcounter::operator=(RightHandSide));
	}

}
